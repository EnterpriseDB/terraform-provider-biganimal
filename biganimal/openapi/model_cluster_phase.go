/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterPhase struct for ClusterPhase
type ClusterPhase struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	Category string `json:"category"`
	EffectiveAt *PointInTime `json:"effectiveAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterPhase ClusterPhase

// NewClusterPhase instantiates a new ClusterPhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPhase(id float32, name string, category string) *ClusterPhase {
	this := ClusterPhase{}
	this.Id = id
	this.Name = name
	this.Category = category
	return &this
}

// NewClusterPhaseWithDefaults instantiates a new ClusterPhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPhaseWithDefaults() *ClusterPhase {
	this := ClusterPhase{}
	return &this
}

// GetId returns the Id field value
func (o *ClusterPhase) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ClusterPhase) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ClusterPhase) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ClusterPhase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterPhase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterPhase) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value
func (o *ClusterPhase) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ClusterPhase) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ClusterPhase) SetCategory(v string) {
	o.Category = v
}

// GetEffectiveAt returns the EffectiveAt field value if set, zero value otherwise.
func (o *ClusterPhase) GetEffectiveAt() PointInTime {
	if o == nil || o.EffectiveAt == nil {
		var ret PointInTime
		return ret
	}
	return *o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPhase) GetEffectiveAtOk() (*PointInTime, bool) {
	if o == nil || o.EffectiveAt == nil {
		return nil, false
	}
	return o.EffectiveAt, true
}

// HasEffectiveAt returns a boolean if a field has been set.
func (o *ClusterPhase) HasEffectiveAt() bool {
	if o != nil && o.EffectiveAt != nil {
		return true
	}

	return false
}

// SetEffectiveAt gets a reference to the given PointInTime and assigns it to the EffectiveAt field.
func (o *ClusterPhase) SetEffectiveAt(v PointInTime) {
	o.EffectiveAt = &v
}

func (o ClusterPhase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if o.EffectiveAt != nil {
		toSerialize["effectiveAt"] = o.EffectiveAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ClusterPhase) UnmarshalJSON(bytes []byte) (err error) {
	varClusterPhase := _ClusterPhase{}

	if err = json.Unmarshal(bytes, &varClusterPhase); err == nil {
		*o = ClusterPhase(varClusterPhase)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "category")
		delete(additionalProperties, "effectiveAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterPhase struct {
	value *ClusterPhase
	isSet bool
}

func (v NullableClusterPhase) Get() *ClusterPhase {
	return v.value
}

func (v *NullableClusterPhase) Set(val *ClusterPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPhase(val *ClusterPhase) *NullableClusterPhase {
	return &NullableClusterPhase{value: val, isSet: true}
}

func (v NullableClusterPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


