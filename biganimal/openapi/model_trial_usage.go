/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TrialUsage struct for TrialUsage
type TrialUsage struct {
	OrgId string `json:"orgId"`
	ExpireAt PointInTime `json:"expireAt"`
	CloudProviderUsages []TrialUsageCloudProviderUsagesInner `json:"cloudProviderUsages"`
}

// NewTrialUsage instantiates a new TrialUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrialUsage(orgId string, expireAt PointInTime, cloudProviderUsages []TrialUsageCloudProviderUsagesInner) *TrialUsage {
	this := TrialUsage{}
	this.OrgId = orgId
	this.ExpireAt = expireAt
	this.CloudProviderUsages = cloudProviderUsages
	return &this
}

// NewTrialUsageWithDefaults instantiates a new TrialUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrialUsageWithDefaults() *TrialUsage {
	this := TrialUsage{}
	return &this
}

// GetOrgId returns the OrgId field value
func (o *TrialUsage) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *TrialUsage) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *TrialUsage) SetOrgId(v string) {
	o.OrgId = v
}

// GetExpireAt returns the ExpireAt field value
func (o *TrialUsage) GetExpireAt() PointInTime {
	if o == nil {
		var ret PointInTime
		return ret
	}

	return o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value
// and a boolean to check if the value has been set.
func (o *TrialUsage) GetExpireAtOk() (*PointInTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpireAt, true
}

// SetExpireAt sets field value
func (o *TrialUsage) SetExpireAt(v PointInTime) {
	o.ExpireAt = v
}

// GetCloudProviderUsages returns the CloudProviderUsages field value
func (o *TrialUsage) GetCloudProviderUsages() []TrialUsageCloudProviderUsagesInner {
	if o == nil {
		var ret []TrialUsageCloudProviderUsagesInner
		return ret
	}

	return o.CloudProviderUsages
}

// GetCloudProviderUsagesOk returns a tuple with the CloudProviderUsages field value
// and a boolean to check if the value has been set.
func (o *TrialUsage) GetCloudProviderUsagesOk() ([]TrialUsageCloudProviderUsagesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudProviderUsages, true
}

// SetCloudProviderUsages sets field value
func (o *TrialUsage) SetCloudProviderUsages(v []TrialUsageCloudProviderUsagesInner) {
	o.CloudProviderUsages = v
}

func (o TrialUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["orgId"] = o.OrgId
	}
	if true {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if true {
		toSerialize["cloudProviderUsages"] = o.CloudProviderUsages
	}
	return json.Marshal(toSerialize)
}

type NullableTrialUsage struct {
	value *TrialUsage
	isSet bool
}

func (v NullableTrialUsage) Get() *TrialUsage {
	return v.value
}

func (v *NullableTrialUsage) Set(val *TrialUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableTrialUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableTrialUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrialUsage(val *TrialUsage) *NullableTrialUsage {
	return &NullableTrialUsage{value: val, isSet: true}
}

func (v NullableTrialUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrialUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


