/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventsMetadata struct for EventsMetadata
type EventsMetadata struct {
	Type string `json:"type"`
	Values []string `json:"values"`
}

// NewEventsMetadata instantiates a new EventsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsMetadata(type_ string, values []string) *EventsMetadata {
	this := EventsMetadata{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewEventsMetadataWithDefaults instantiates a new EventsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsMetadataWithDefaults() *EventsMetadata {
	this := EventsMetadata{}
	return &this
}

// GetType returns the Type field value
func (o *EventsMetadata) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventsMetadata) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventsMetadata) SetType(v string) {
	o.Type = v
}

// GetValues returns the Values field value
func (o *EventsMetadata) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *EventsMetadata) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *EventsMetadata) SetValues(v []string) {
	o.Values = v
}

func (o EventsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableEventsMetadata struct {
	value *EventsMetadata
	isSet bool
}

func (v NullableEventsMetadata) Get() *EventsMetadata {
	return v.value
}

func (v *NullableEventsMetadata) Set(val *EventsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsMetadata(val *EventsMetadata) *NullableEventsMetadata {
	return &NullableEventsMetadata{value: val, isSet: true}
}

func (v NullableEventsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


