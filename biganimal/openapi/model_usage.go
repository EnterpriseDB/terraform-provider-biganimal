/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Usage struct for Usage
type Usage struct {
	Usages []ClusterUsage `json:"usages"`
	Totals UsageTotals `json:"totals"`
}

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage(usages []ClusterUsage, totals UsageTotals) *Usage {
	this := Usage{}
	this.Usages = usages
	this.Totals = totals
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetUsages returns the Usages field value
func (o *Usage) GetUsages() []ClusterUsage {
	if o == nil {
		var ret []ClusterUsage
		return ret
	}

	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value
// and a boolean to check if the value has been set.
func (o *Usage) GetUsagesOk() ([]ClusterUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usages, true
}

// SetUsages sets field value
func (o *Usage) SetUsages(v []ClusterUsage) {
	o.Usages = v
}

// GetTotals returns the Totals field value
func (o *Usage) GetTotals() UsageTotals {
	if o == nil {
		var ret UsageTotals
		return ret
	}

	return o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value
// and a boolean to check if the value has been set.
func (o *Usage) GetTotalsOk() (*UsageTotals, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Totals, true
}

// SetTotals sets field value
func (o *Usage) SetTotals(v UsageTotals) {
	o.Totals = v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["usages"] = o.Usages
	}
	if true {
		toSerialize["totals"] = o.Totals
	}
	return json.Marshal(toSerialize)
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


