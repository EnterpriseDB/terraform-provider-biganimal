openapi: 3.0.3
info:
  contact:
    name: BigAnimal Support
    url: https://support.biganimal.com/
  description: "BigAnimal REST API v2 <br /><br />\nPlease visit [API v2 Changelog\
    \ page](/api/docs/v2migration.html) for information about migrating from API v1.\n"
  title: BigAnimal
  version: 2.5.1
servers:
- url: /api/v2
tags:
- name: Auth
- name: Billing
- name: Cloud Providers
- name: Cluster Architectures
- name: Clusters
- name: Events
- name: Free Trial
- name: Integrations
- name: JWKS
- name: Organizations
- name: Permissions
- name: Postgres
- name: Provider
- name: Roles
- name: Status
- name: Subscription
- name: Users
- name: Utils
paths:
  /account/clusters:
    get:
      description: Returns organization clusters overview
      operationId: getAccountClustersOverview
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountClustersOverview_200_response'
          description: Account clusters
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      - Organizations
      x-perms:
      - read:clusters
  /account/news:
    get:
      description: Returns account news
      operationId: getAccountNews
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountNews_200_response'
          description: Account News
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Organizations
      x-perms:
      - read:clusters
  /account/notifications:
    get:
      description: Returns account notifications
      operationId: getAccountNotifications
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountNotifications_200_response'
          description: Account notifications
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Organizations
      x-perms:
      - read:clusters
  /account/settings:
    get:
      description: Return the settings of the organization
      operationId: getOrganizationSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrganizationSettings_200_response'
          description: Settings
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Organizations
    put:
      description: Create or update the settings of the organization
      operationId: updateOrganizationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrganizationSettings_200_response'
          description: Settings
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Organizations
  /account/trial-usage:
    get:
      description: Returns trial usage of a freetrial organization
      operationId: getAccountTrialUsage
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountTrialUsage_200_response'
          description: Free Trial Usage
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Free Trial
  /auth/provider:
    get:
      description: Return auth provider information
      operationId: getProvider
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProvider_200_response'
          description: Provider
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Provider
  /auth/token:
    post:
      description: This API is used for exchanging BigAnimal token by a raw token
        obtained from device code flow
      operationId: createBigAnimalTokenByRawToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authToken'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authToken'
          description: UPM token.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Auth
  /billing:
    get:
      description: Returns organization billing usage
      operationId: getBilling
      parameters:
      - example: 2021-01-15T12:30:40Z
        in: query
        name: startAt
        required: true
        schema:
          type: string
      - example: 2021-02-15T12:30:40Z
        in: query
        name: endAt
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBilling_200_response'
          description: Billing
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Billing
      x-perms:
      - read:billing
  /cluster-architectures:
    get:
      description: Returns an array of cluster architectures
      operationId: getClusterArchitectures
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClusterArchitectures_200_response'
          description: Cluster Architectures
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cluster Architectures
      x-perms:
      - read:clusters
  /cloud-providers:
    get:
      description: Returns an array of cloud providers
      operationId: getCloudProviders
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCloudProviders_200_response'
          description: Cloud providers
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:clusters
  /cloud-providers/{cloudProviderId}/register:
    get:
      description: Returns the register info of the cloud provider. Only support AWS.
      operationId: getRegisteredCloudProvider
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRegisteredCloudProvider_200_response'
          description: Registered cloud provider info
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:cloud_providers
    post:
      description: Register a cloud provider
      operationId: createCloudProvider
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/registerCloudProvider'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCloudProvider_200_response'
          description: Register response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - create:cloud_providers
  /cloud-providers/{cloudProviderId}/regions:
    get:
      description: Returns a list of supported regions for a given cloud provider
      operationId: getCloudProviderRegions
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCloudProviderRegions_200_response'
          description: Cloud provider regions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:clusters
  /cloud-providers/{cloudProviderId}/regions/{regionId}/activate:
    post:
      description: Activates a region
      operationId: activateRegion
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - example: us-east-1
        in: path
        name: regionId
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/activateRegion_202_response'
          description: Region ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - update:clusters
  /cloud-providers/{cloudProviderId}/regions/{regionId}/delete:
    post:
      description: Deletes a region
      operationId: deleteRegion
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - example: us-east-1
        in: path
        name: regionId
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/activateRegion_202_response'
          description: Region ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - update:clusters
  /cloud-providers/{cloudProviderId}/regions/{regionId}/suspend:
    post:
      description: Suspends a region
      operationId: suspendRegion
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - example: us-east-1
        in: path
        name: regionId
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/activateRegion_202_response'
          description: Region ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - update:clusters
  /cloud-providers/{cloudProviderId}/regions/{regionId}/instance-types:
    get:
      description: Returns a list of supported instance types for a given region of
        a cloud provider
      operationId: getCloudProviderRegionInstanceTypes
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - example: us-east-1
        in: path
        name: regionId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCloudProviderRegionInstanceTypes_200_response'
          description: Cloud provider region instance types
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:clusters
  /cloud-providers/{cloudProviderId}/regions/{regionId}/volume-types:
    get:
      description: Returns a list of supported volume types for a given region of
        a cloud provider
      operationId: getCloudProviderRegionVolumeTypes
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - example: us-east-1
        in: path
        name: regionId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      - description: Array of instanceType family names
        example:
        - AWS EC2 C5 Instances
        in: query
        name: instanceFamilyNames
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCloudProviderRegionVolumeTypes_200_response'
          description: Cloud provider region volume types
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:clusters
  /cloud-providers/{cloudProviderId}/regions/{regionId}/volume-types/{volumeTypeId}/volume-properties:
    get:
      description: Returns a list of supported volume properties for a given volume
        type of a given region of a given cloud provider
      operationId: getVolumeProperties
      parameters:
      - example: azure
        in: path
        name: cloudProviderId
        required: true
        schema:
          type: string
      - example: us-east-1
        in: path
        name: regionId
        required: true
        schema:
          type: string
      - example: azurepremiumstorage
        in: path
        name: volumeTypeId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVolumeProperties_200_response'
          description: Volume properties
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:clusters
  /clusters:
    get:
      description: Gets a list of clusters
      operationId: getClusters
      parameters:
      - description: Filter clusters by cluster architecture
        example:
        - ha
        in: query
        name: clusterArchitectureIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Cluster name to filter to
        example: my-cluster-1
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Filter clusters by region
        example:
        - WUS2
        in: query
        name: regionIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Filter clusters by type
        example:
        - epas
        in: query
        name: pgTypeIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Filter clusters by version
        example:
        - "11"
        in: query
        name: pgVersionIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Filter for exact match on non-list parameters
        example: true
        in: query
        name: exact
        required: false
        schema:
          type: boolean
      - description: sort clusters by property
        example: +clusterName
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClusters_200_response'
          description: List of clusters
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
    post:
      description: Creates and returns a new cluster
      operationId: createCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCluster'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCluster_202_response'
          description: Cluster ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - create:clusters
  /clusters/{clusterId}:
    delete:
      description: Deletes a cluster
      operationId: deleteCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - delete:clusters
    get:
      description: Gets a cluster
      operationId: getCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCluster_200_response'
          description: Cluster detail
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
    patch:
      description: Patches a cluster
      operationId: patchCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patchCluster'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCluster_202_response'
          description: Cluster ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - update:clusters
    put:
      description: Updates a cluster
      operationId: updateCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCluster'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCluster_202_response'
          description: Cluster ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - update:clusters
  /clusters/{clusterId}/restore:
    post:
      description: Restores a cluster from a backup
      operationId: restoreCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restoreCluster'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCluster_202_response'
          description: Cluster ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - create:clusters
  /clusters/{clusterId}/connection:
    get:
      description: Gets a cluster connection info
      operationId: getClusterConnection
      parameters:
      - example: my-cluster
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClusterConnection_200_response'
          description: Cluster connection
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
  /clusters/{clusterId}/phases:
    get:
      description: Gets a list of cluster phases based on a cluster id
      operationId: getClusterPhases
      parameters:
      - example: my-cluster
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClusterPhases_200_response'
          description: Cluster phase
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
  /clusters/{clusterId}/pg-config-parameters:
    get:
      description: Returns PG configuration for given cluster
      operationId: getClusterPgConfig
      parameters:
      - example: ""
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClusterPgConfig_200_response'
          description: Cluster PgConfig parameters
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
  /deleted-clusters:
    get:
      description: Gets a list of deleted clusters
      operationId: getDeletedClusters
      parameters:
      - description: Filter clusters by cluster architecture
        example:
        - ha
        in: query
        name: clusterArchitectureIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Cluster name to filter to
        example: my-cluster-1
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Filter clusters by region
        example:
        - WUS2
        in: query
        name: regionIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Filter clusters by type
        example:
        - epas
        in: query
        name: pgTypeIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Filter clusters by version
        example:
        - "11"
        in: query
        name: pgVersionIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Filter for exact match on non-list parameters
        example: true
        in: query
        name: exact
        required: false
        schema:
          type: boolean
      - description: sort clusters by property
        example: +clusterName
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClusters_200_response'
          description: List of clusters
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
  /deleted-clusters/{clusterId}:
    get:
      description: Gets a deleted cluster
      operationId: getDeletedCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCluster_200_response'
          description: Cluster detail
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - read:clusters
  /deleted-clusters/{clusterId}/restore:
    post:
      description: Restores a deleted cluster from a backup
      operationId: restoreDeletedCluster
      parameters:
      - example: p-c5jhbe65n1d8iosambm0
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restoreCluster'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCluster_202_response'
          description: Cluster ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Clusters
      x-perms:
      - create:clusters
  /events:
    post:
      description: Returns a list of events
      operationId: runSearchForEvents
      requestBody:
        $ref: '#/components/requestBodies/events'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runSearchForEvents_200_response'
          description: Events
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/415'
          description: Unsupported Media Type
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Events
      x-perms:
      - read:events
  /events-metadata:
    get:
      description: Returns metadata of events
      operationId: listMetadata
      parameters:
      - example: 2021-01-15T12:30:40Z
        in: query
        name: startAt
        required: true
        schema:
          type: string
      - example: 2021-02-15T12:30:40Z
        in: query
        name: endAt
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listMetadata_200_response'
          description: Events metadata
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Events
      x-perms:
      - read:events
  /integrations/azure/orders:
    get:
      description: This is a webhook registered in Azure Marketplace. Will be invoked
        after the user subscribes our SaaS offer and starts to configure its account
        in the created SaaS resource
      operationId: getIntegrationsAzureOrder
      parameters:
      - description: The purchase identification token from the Azure Marketplace
        example: TlXpQkyNEf7VuR57z2L%2BAC%2F7z03YpQ0IpNs...
        in: query
        name: token
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The redirect URL to the next web page for customer registration
          headers:
            Location:
              description: The redirect URL
              example: https://nonexist
              schema:
                type: string
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Integrations
  /integrations/azure/events:
    post:
      description: A webhook registered in Azure Marketplace. Azure will call this
        API to notify SaaS subscription any changes
      operationId: createIntegrationsAzureEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/integrationsAzureEvent'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Empty
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Integrations
  /permissions:
    get:
      description: Returns a list of permissions
      operationId: listPermissions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPermissions_200_response'
          description: Permissions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Permissions
      x-perms:
      - read:permissions
  /pg-config-evaluate:
    put:
      description: Evaluate PgConfig Template
      operationId: runPgConfigEvaluation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/evaluatePgConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runPgConfigEvaluation_200_response'
          description: PgConfig Evaluate
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - create:clusters
  /pg-config-templates:
    get:
      description: Returns a list of PgConfig Templates
      operationId: getPgConfigTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPgConfigTemplates_200_response'
          description: PgConfig Templates List
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - read:clusters
    post:
      description: Creates new PgConfig template.
      operationId: createPgConfigTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPgConfigTemplate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPgConfigTemplate_200_response'
          description: PgConfig Template
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - create:clusters
  /pg-config-templates/{pgConfigTemplateId}:
    delete:
      description: Deletes a PgConfig Template
      operationId: deletePgConfigTemplate
      parameters:
      - example: 1a164b74-ec89-486a-b914-ccc5af38487d
        in: path
        name: pgConfigTemplateId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - delete:clusters
    get:
      description: Gets a PgConfig Template
      operationId: getPgConfigTemplate
      parameters:
      - example: 77693995-ee51-4a6a-ad71-b8311b666c60
        in: path
        name: pgConfigTemplateId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPgConfigTemplate_200_response'
          description: PgConfig Template
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - read:clusters
    put:
      description: Updates a PgConfig template
      operationId: updatePgConfigTemplate
      parameters:
      - example: 77693995-ee51-4a6a-ad71-b8311b666c60
        in: path
        name: pgConfigTemplateId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePgConfigTemplate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatePgConfigTemplate_200_response'
          description: PgConfig Template
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - update:clusters
  /pg-config-templates/{pgConfigTemplateId}/evaluate:
    put:
      description: Evaluate PgConfig Template
      operationId: runPgConfigTemplatesEvaluation
      parameters:
      - example: 77693995-ee51-4a6a-ad71-b8311b666c60
        in: path
        name: pgConfigTemplateId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/evaluatePgConfigTemplate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runPgConfigTemplatesEvaluation_200_response'
          description: Evaluate PgConfig Template
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
          description: Conflict
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/412'
          description: Precondition failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - create:clusters
  /pg-config-parameters:
    get:
      description: Returns an array of PgConfig parameters
      operationId: getPgConfigParameters
      parameters:
      - description: pgTypeId
        example: epas
        in: query
        name: pgTypeId
        required: true
        schema:
          type: string
      - description: pgVersionId
        example: "14"
        in: query
        name: pgVersionId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPgConfigParameters_200_response'
          description: PgConfig parameters
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - read:clusters
  /pg-types:
    get:
      description: Returns an array of PG types
      operationId: getPgTypes
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      - description: Array of cluster architecture IDs
        example:
        - single
        in: query
        name: clusterArchitectureIds
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPgTypes_200_response'
          description: PG types
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - read:clusters
  /pg-versions:
    get:
      description: Returns an array of PG versions
      operationId: getPgVersions
      parameters:
      - description: Array of cluster architecture IDs
        example:
        - single
        in: query
        name: clusterArchitectureIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPgVersions_200_response'
          description: PG versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Postgres
      x-perms:
      - read:clusters
  /regions:
    get:
      description: Returns regions across all Cloud Providers
      operationId: getRegions
      parameters:
      - description: Array of cloud provider IDs
        example:
        - azure
        in: query
        name: cloudProviderIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Array of continents
        example:
        - Asia
        in: query
        name: continents
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      - description: Array of status
        example:
        - INACTIVE
        in: query
        name: status
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRegions_200_response'
          description: Regions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Cloud Providers
      x-perms:
      - read:clusters
  /register/{providerId}/sub/{subscriptionId}:
    post:
      description: Creates a new subscription
      operationId: createSubscription
      parameters:
      - example: azure
        in: path
        name: providerId
        required: true
        schema:
          type: string
      - example: 491e0eb1-3757-4b38-dfb6-049442abaeda
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerSubscription'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSubscription_201_response'
          description: Create SaaS subscription response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSubscription_201_response'
          description: Create SaaS subscription response
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
  /register/{providerId}/sub/{subscriptionId}/validation:
    get:
      description: validate a new subscription's beneficiary
      operationId: getBeneficiaryValidation
      parameters:
      - example: azure
        in: path
        name: providerId
        required: true
        schema:
          type: string
      - example: 491e0eb1-3757-4b38-dfb6-049442abaeda
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBeneficiaryValidation_200_response'
          description: Beneficiary Validation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
  /roles:
    get:
      description: Returns a list of roles
      operationId: getRoles
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRoles_200_response'
          description: Roles
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Roles
      x-perms:
      - read:roles
  /roles/{roleId}:
    delete:
      description: Delete a new role
      operationId: deleteRole
      parameters:
      - example: role_id_1
        in: path
        name: roleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Empty
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Roles
      x-perms:
      - delete:roles
    get:
      description: Returns a role
      operationId: getRole
      parameters:
      - example: role_id_1
        in: path
        name: roleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRole_200_response'
          description: Role
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Roles
      x-perms:
      - read:roles
    put:
      description: Update a new role
      operationId: resetRole
      parameters:
      - example: role_id_1
        in: path
        name: roleId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRole_200_response'
          description: Role
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Roles
      x-perms:
      - update:roles
  /roles/{roleId}/permissions:
    get:
      description: Returns permissions for a role
      operationId: listRolePermissions
      parameters:
      - example: role_id_1
        in: path
        name: roleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPermissions_200_response'
          description: Permissions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Permissions
      - Roles
      x-perms:
      - read:permissions
    put:
      description: Update permissions for a role
      operationId: assignRolePermissions
      parameters:
      - example: role_id_1
        in: path
        name: roleId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rolePermissions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assignRolePermissions_200_response'
          description: RoleID and Permissions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Permissions
      - Roles
      x-perms:
      - update:roles
  /roles/{roleId}/users:
    get:
      description: Returns a list of users for a role
      operationId: listRoleUsers
      parameters:
      - example: role_id_1
        in: path
        name: roleId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listRoleUsers_200_response'
          description: Users
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      - Roles
      x-perms:
      - read:roles
  /status/maintenance-windows:
    get:
      description: Returns Maintenance Windows
      operationId: getMaintenanceWindows
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMaintenanceWindows_200_response'
          description: Maintenance Windows
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Status
  /status/outages:
    get:
      description: Returns Current Outages
      operationId: getOutages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOutages_200_response'
          description: Outages
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Status
  /users:
    get:
      description: Returns a list of users
      operationId: getUsers
      parameters:
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listRoleUsers_200_response'
          description: Users
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      x-perms:
      - read:users
  /usage:
    get:
      description: Returns usage
      operationId: getUsage
      parameters:
      - example: 2021-01-15T12:30:40Z
        in: query
        name: startAt
        required: true
        schema:
          type: string
      - example: 2021-02-15T12:30:40Z
        in: query
        name: endAt
        required: true
        schema:
          type: string
      - description: Array of cloud provider IDs
        example:
        - azure
        in: query
        name: cloudProviderIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Array of pgType IDs
        example:
        - epas
        in: query
        name: pgTypeIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Array of cloud cluster architectures
        example:
        - ha
        in: query
        name: clusterArchitecturesIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsage_200_response'
          description: Usage
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Billing
      x-perms:
      - read:billing
  /usage-csv:
    get:
      description: Returns usage report as a CSV file
      operationId: getUsageReportFile
      parameters:
      - example: 2021-01-15T12:30:40Z
        in: query
        name: startAt
        required: true
        schema:
          type: string
      - example: 2021-02-15T12:30:40Z
        in: query
        name: endAt
        required: true
        schema:
          type: string
      - description: Array of cloud provider IDs
        example:
        - azure
        in: query
        name: cloudProviderIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Array of cloud cluster architectures
        example:
        - ha
        in: query
        name: clusterArchitecturesIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Array of pgType IDs
        example:
        - epas
        in: query
        name: pgTypeIds
        required: false
        schema:
          items:
            type: string
          type: array
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      - description: The cluster name columm title. The default value is Cluster Name.
        example: Cluster Name
        in: query
        name: clusterNameTitle
        required: false
        schema:
          type: string
      - description: The database type column title. The default value is Database
          Type.
        example: Database Type
        in: query
        name: pgTypeTitle
        required: false
        schema:
          type: string
      - description: The cloud provider column title. The default value is Cloud Provider.
        example: Cloud Provider
        in: query
        name: cloudProviderTitle
        required: false
        schema:
          type: string
      - description: The cluster architecture title. The default value is Cluster
          Architecture.
        example: Single
        in: query
        name: clusterArchitectureTitle
        required: false
        schema:
          type: string
      - description: The usage of vCPU hour column title. The default value is vCPU
          Hours.
        example: vCPU Hours
        in: query
        name: vcpuHoursTitle
        required: false
        schema:
          type: string
      - description: "If the cluster is deleted, in Cluster Name column, it will show\
          \ the deleted prefix with cluster id."
        example: Deleted cluster
        in: query
        name: deletedClusterPrefix
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                type: string
          description: A CSV file
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Billing
      x-perms:
      - read:billing
  /users/{userId}:
    delete:
      description: Delete a user
      operationId: deleteUser
      parameters:
      - example: user_id_1
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Empty
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      x-perms:
      - delete:users
    get:
      description: Returns a user
      operationId: getUser
      parameters:
      - example: user_id_1
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser_200_response'
          description: Users
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      x-perms:
      - read:users
  /users/{userId}/roles:
    get:
      description: Returns a list of roles for a user
      operationId: listUserRoles
      parameters:
      - example: user_id_1
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: Fulltext search
        example: John
        in: query
        name: q
        required: false
        schema:
          type: string
      - description: "Sort by property of the object. Use dot notation eg. \"state.city\"\
          \ for sorting by nested property. Default sort is ASC. Prepend with \"-\"\
          \ for DESC sort. For numeric sorting use \"size|numeric:true\". First part\
          \ is property path, second part is optional parameter of the sort. Supported\
          \ options are \"numeric:true|false\" for numeric sorting and \"sensitivity:base\"\
          \ to compare base of the string only: a ≠ b, a = á, a = A."
        examples:
          default:
            summary: sort by "firstName" property ASC
            value: firstName
          order:
            summary: sort by "firstName" property DESC
            value: -firstName
          nested:
            summary: sort by "city" property of the "state" property ASC
            value: state.city
          withParams:
            summary: "sort by \"size\" property with numerical order, using base sensitivity\
              \ DESC"
            value: "-size|numeric:true,sensitivity:base"
        in: query
        name: sort
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRoles_200_response'
          description: Roles
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      - Roles
      x-perms:
      - read:users
    put:
      description: Reset roles for a user
      operationId: updateUserRoles
      parameters:
      - example: user_id_1
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRoles'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser_200_response'
          description: Users
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      - Roles
      x-perms:
      - update:users
  /utils/password-strength:
    put:
      description: Returns password strength
      operationId: runCheckForPasswordStrength
      requestBody:
        $ref: '#/components/requestBodies/utilsPasswordStrength'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runCheckForPasswordStrength_200_response'
          description: Password strength
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Utils
  /subscriptions/{subscriptionId}:
    get:
      description: Returns a subscription by ID
      operationId: getSubscriptionById
      parameters:
      - description: Subscription ID
        example: cb8335a3-ab39-4f5b-b95c-9d14210ce6c1
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      - description: Code
        example: dCPbl7Lzaq1Ehpp2I64BTP2Z2w0tig9d
        in: query
        name: code
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSubscriptionById_200_response'
          description: Subscription information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
      x-perms:
      - read:subscriptions
  /subscriptions/{subscriptionId}/connections:
    get:
      description: Returns a connection info
      operationId: getConnectionList
      parameters:
      - description: Subscription ID
        example: cb07adba-dbcd-453f-a562-88f9ff7e4398
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      - description: Code
        example: cb07adba-dbcd-453f-a562-88f9ff7e4398
        in: query
        name: code
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getConnectionList_200_response'
          description: Connection information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
      x-perms:
      - read:subscriptions
    put:
      description: Update connection based on connectionId
      operationId: updateConnectionConfig
      parameters:
      - description: Subscription ID
        example: cb07adba-dbcd-453f-a562-88f9ff7e4398
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      - description: Code
        example: cb07adba-dbcd-453f-a562-88f9ff7e4398
        in: query
        name: code
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/connections'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getConnectionList_200_response'
          description: Connection information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
  /subscriptions/{subscriptionId}/connections/activate:
    put:
      description: Activate connection based on connectionId
      operationId: updateConnectionStatus
      parameters:
      - description: Subscription ID
        example: cb07adba-dbcd-453f-a562-88f9ff7e4398
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      - description: Code
        example: cb07adba-dbcd-453f-a562-88f9ff7e4398
        in: query
        name: code
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Empty
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
  /validate-subscription-code/{code}:
    get:
      description: Returns a subscription by code
      operationId: getSubscriptionByCode
      parameters:
      - description: Code
        example: dCPbl7Lzaq1Ehpp2I64BTP2Z2w0tig9d
        in: path
        name: code
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSubscriptionById_200_response'
          description: Subscription information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
      x-perms:
      - read:subscriptions
  /identity-providers:
    get:
      description: Returns a connection info
      operationId: getIdentityProviders
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getConnectionList_200_response'
          description: Connection information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Subscription
      x-perms:
      - read:identity_provider
  /.well-known/jwks:
    get:
      description: Returns a json jwks keys
      operationId: getJwksJson
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Empty
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - JWKS
  /user-info:
    get:
      description: Returns organization billing usage
      operationId: getUserInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserInfo_200_response'
          description: User Info
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
          description: Not authorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
          description: Not found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/429'
          description: Too many requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
          description: Internal Server Error
      tags:
      - Users
      x-perms:
      - read:users
components:
  requestBodies:
    registerCloudProvider:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createCloudProvider_request'
      description: Register Request
    events:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/runSearchForEvents_request'
      required: true
    utilsPasswordStrength:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/runCheckForPasswordStrength_request'
      required: true
  responses:
    accountClusters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getAccountClustersOverview_200_response'
      description: Account clusters
    "400":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/400'
      description: Bad request
    "401":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/401'
      description: Not authorized
    "403":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/403'
      description: Forbidden
    "404":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/404'
      description: Not found
    "429":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/429'
      description: Too many requests
    "500":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/500'
      description: Internal Server Error
    accountNews:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getAccountNews_200_response'
      description: Account News
    accountNotifications:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getAccountNotifications_200_response'
      description: Account notifications
    accountSettings:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getOrganizationSettings_200_response'
      description: Settings
    getAccountTrialUsage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getAccountTrialUsage_200_response'
      description: Free Trial Usage
    authProvider:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getProvider_200_response'
      description: Provider
    authToken:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/authToken'
      description: UPM token.
    billing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getBilling_200_response'
      description: Billing
    clusterArchitectures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getClusterArchitectures_200_response'
      description: Cluster Architectures
    cloudProviders:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getCloudProviders_200_response'
      description: Cloud providers
    registeredCloudProvider:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getRegisteredCloudProvider_200_response'
      description: Registered cloud provider info
    registerCloudProvider:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createCloudProvider_200_response'
      description: Register response
    "409":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/409'
      description: Conflict
    cloudProviderRegions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getCloudProviderRegions_200_response'
      description: Cloud provider regions
    regionId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activateRegion_202_response'
      description: Region ID
    cloudProviderRegionInstanceTypes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getCloudProviderRegionInstanceTypes_200_response'
      description: Cloud provider region instance types
    cloudProviderRegionVolumeTypes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getCloudProviderRegionVolumeTypes_200_response'
      description: Cloud provider region volume types
    volumeProperties:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getVolumeProperties_200_response'
      description: Volume properties
    clusters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getClusters_200_response'
      description: List of clusters
    clusterId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createCluster_202_response'
      description: Cluster ID
    "412":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/412'
      description: Precondition failed
    clusterDetail:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getCluster_200_response'
      description: Cluster detail
    clusterConnection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getClusterConnection_200_response'
      description: Cluster connection
    clusterPhases:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getClusterPhases_200_response'
      description: Cluster phase
    clusterPgConfigParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getClusterPgConfig_200_response'
      description: Cluster PgConfig parameters
    events:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/runSearchForEvents_200_response'
      description: Events
    "415":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/415'
      description: Unsupported Media Type
    eventsMetadata:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listMetadata_200_response'
      description: Events metadata
    integrationsAzureOrder:
      description: The redirect URL to the next web page for customer registration
      headers:
        Location:
          description: The redirect URL
          example: https://nonexist
          schema:
            type: string
    empty:
      content:
        application/json:
          schema:
            type: object
      description: Empty
    permissions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listPermissions_200_response'
      description: Permissions
    evaluatePgConfig:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/runPgConfigEvaluation_200_response'
      description: PgConfig Evaluate
    pgConfigTemplates:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getPgConfigTemplates_200_response'
      description: PgConfig Templates List
    createPgConfigTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createPgConfigTemplate_200_response'
      description: PgConfig Template
    pgConfigTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getPgConfigTemplate_200_response'
      description: PgConfig Template
    updatePgConfigTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updatePgConfigTemplate_200_response'
      description: PgConfig Template
    evaluatePgConfigTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/runPgConfigTemplatesEvaluation_200_response'
      description: Evaluate PgConfig Template
    pgConfigParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getPgConfigParameters_200_response'
      description: PgConfig parameters
    pgTypes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getPgTypes_200_response'
      description: PG types
    pgVersions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getPgVersions_200_response'
      description: PG versions
    regions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getRegions_200_response'
      description: Regions
    registerSubscription:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createSubscription_201_response'
      description: Create SaaS subscription response
    registerSubscriptionValidation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getBeneficiaryValidation_200_response'
      description: Beneficiary Validation
    roles:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getRoles_200_response'
      description: Roles
    role:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getRole_200_response'
      description: Role
    updatePermissions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/assignRolePermissions_200_response'
      description: RoleID and Permissions
    users:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listRoleUsers_200_response'
      description: Users
    statusMaintenanceWindows:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getMaintenanceWindows_200_response'
      description: Maintenance Windows
    statusOutages:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getOutages_200_response'
      description: Outages
    usage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getUsage_200_response'
      description: Usage
    user:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getUser_200_response'
      description: Users
    utilsPasswordStrength:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/runCheckForPasswordStrength_200_response'
      description: Password strength
    getSubscription:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getSubscriptionById_200_response'
      description: Subscription information
    connections:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getConnectionList_200_response'
      description: Connection information
    userInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getUserInfo_200_response'
      description: User Info
  schemas:
    clusterEstate:
      example:
        organizationId: myOrg
        cloudProviderId: azure
        cloudProviderName: Azure
        clusterRegions:
        - regionName: West US 2
          clusterCount: 1
          regionId: westus2
        - regionName: East US
          clusterCount: 2
          regionId: eastus
      properties:
        organizationId:
          type: string
        cloudProviderId:
          type: string
        cloudProviderName:
          type: string
        clusterRegions:
          items:
            $ref: '#/components/schemas/clusterEstate_clusterRegions_inner'
          type: array
      required:
      - cloudProviderId
      - cloudProviderName
      - clusterRegions
      - organizationId
      type: object
    "400":
      additionalProperties: false
      example:
        error:
          status: 400
          message: Bad request
          reference: requestI123456789d
          errors:
          - path: .body.instanceType
            message: should have required property 'instanceType'
            errorCode: required.openapi.validation
      properties:
        error:
          $ref: '#/components/schemas/_400_error'
      type: object
    "401":
      additionalProperties: false
      example:
        error:
          status: 401
          message: Not authorized
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    "403":
      additionalProperties: false
      example:
        error:
          status: 403
          message: Forbidden
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    "404":
      additionalProperties: false
      example:
        error:
          status: 404
          message: Not Found
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    "429":
      additionalProperties: false
      example:
        error:
          status: 429
          message: Too many requests
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    "500":
      additionalProperties: false
      example:
        error:
          status: 500
          message: Internal Server Error
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    accountNews:
      additionalProperties: false
      example:
        title: Agency for Restructuring and Modernization of Agriculture (ARiMR) Uses
          EDB to Improve Availability of Critical Beneficiary Support Systems
        url: https://www.enterprisedb.com/blog/agency-restructuring-and-modernization-agriculture-arimr-uses-edb-improve-availability
        createdAt:
          seconds: 123123213
          nanos: 0
      properties:
        title:
          type: string
        url:
          type: string
        createdAt:
          $ref: '#/components/schemas/pointInTime'
      required:
      - createdAt
      - title
      - url
      type: object
    accountNotification:
      additionalProperties: false
      example:
        accountNotificationId: "1"
        clusterName: development_1
        description: Query sort operations are splitting into disc (Arox 100MB) -
          Increase work memory for better performance
        notificationType: alert
        objectName: test_table
        title: Slow Query on test_table
      properties:
        accountNotificationId:
          type: string
        clusterName:
          type: string
        objectName:
          type: string
        title:
          type: string
        description:
          type: string
        notificationType:
          type: string
      required:
      - accountNotificationId
      - clusterName
      - description
      - notificationType
      - objectName
      - title
      type: object
    accountSettings:
      additionalProperties: true
      example:
        version: 1
        preferredRegion: eastus
        promotions:
          oracle: true
        blankSlate:
          teamInvited: true
          rolesAssigned: true
          azureConfigured: false
      type: object
    trialUsage:
      additionalProperties: false
      example:
        orgId: org_MyOrg
        expireAt:
          seconds: 123123213
          nanos: 0
        cloudProviderUsages:
        - orgId: org_MyOrg
          cloudProviderId: aws
          cloudProviderName: AWS
          expireAt:
            seconds: 123123213
            nanos: 0
        - orgId: org_MyOrg
          cloudProviderId: azure
          cloudProviderName: Azure
          expireAt:
            seconds: 123123213
            nanos: 0
          clusterUsages:
          - orgId: org_MyOrg
            cloudProviderId: azure
            clusterId: p-0000000001
          - orgId: org_MyOrg
            cloudProviderId: azure
            clusterId: p-0000000002
      properties:
        orgId:
          type: string
        expireAt:
          $ref: '#/components/schemas/pointInTime'
        cloudProviderUsages:
          items:
            $ref: '#/components/schemas/trialUsage_cloudProviderUsages_inner'
          type: array
      required:
      - cloudProviderUsages
      - expireAt
      - orgId
      type: object
    authToken:
      additionalProperties: false
      example:
        token: eyJodHRwczovL2VudGVycHJpc2...
      properties:
        token:
          type: string
      required:
      - token
      type: object
    billing:
      additionalProperties: false
      example:
        totalVcpuHours: 6.027456183070403
        clusterCharges:
        - vcpuHours: 0.8008281904610115
          clusterId: clusterId
        - vcpuHours: 0.8008281904610115
          clusterId: clusterId
      properties:
        clusterCharges:
          items:
            $ref: '#/components/schemas/clusterCharge'
          type: array
        totalVcpuHours:
          type: number
      required:
      - clusterCharges
      - totalVcpuHours
      type: object
    clusterArchitecture:
      additionalProperties: false
      example:
        clusterArchitectureId: eha
        clusterArchitectureName: Extreme High Availability
        enabled: true
      properties:
        clusterArchitectureId:
          type: string
        clusterArchitectureName:
          type: string
        enabled:
          type: boolean
      required:
      - clusterArchitectureId
      - clusterArchitectureName
      - enabled
      type: object
    cloudProvider:
      additionalProperties: false
      example:
        cloudProviderId: azure
        cloudProviderName: Azure
        connected: true
      properties:
        cloudProviderId:
          type: string
        cloudProviderName:
          type: string
        connected:
          type: boolean
      required:
      - cloudProviderId
      - cloudProviderName
      type: object
    "409":
      additionalProperties: false
      example:
        error:
          status: 409
          message: Conflict
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    cloudProviderRegion:
      additionalProperties: false
      example:
        regionId: azure:Canada East
        regionName: Canada East
        status: Active
        continent: Americas
      properties:
        regionId:
          type: string
        regionName:
          type: string
        status:
          type: string
        continent:
          type: string
      required:
      - regionId
      - regionName
      type: object
    cloudProviderRegionInstanceType:
      additionalProperties: false
      example:
        instanceTypeId: "1"
        instanceTypeName: Instance Type
        ram: 2
        cpu: 16
        familyName: Standard vCPUs
        category: Memory Optimized
      properties:
        instanceTypeId:
          type: string
        instanceTypeName:
          type: string
        ram:
          type: number
        cpu:
          type: number
        familyName:
          type: string
        category:
          type: string
      required:
      - category
      - cpu
      - familyName
      - instanceTypeId
      - instanceTypeName
      - ram
      type: object
    cloudProviderRegionVolumeType:
      additionalProperties: false
      example:
        volumeTypeId: "1"
        volumeTypeName: Microsoft Azure File volume (SMB)
        storageClass: azureDisk
        enabledInRegion: true
        supportedInstanceFamilyNames:
        - Standard ESv3 Family vCPUs
        - Standard ESv4 Family vCPUs
      properties:
        volumeTypeId:
          type: string
        volumeTypeName:
          type: string
        storageClass:
          type: string
        enabledInRegion:
          type: boolean
        supportedInstanceFamilyNames:
          items:
            type: string
          type: array
      required:
      - storageClass
      - volumeTypeId
      - volumeTypeName
      type: object
    volumeProperties:
      additionalProperties: false
      example:
        volumePropertiesId: gp3
        volumePropertiesName: "gp3 (1 Gi - 16384 Gi, 3000 IOPS, 125 MiB/s tput)"
        minDiskSize: 1 Gi
        maxDiskSize: 16384 Gi
        minIops: "3000"
        maxIops: "16000"
        defaultIops: "3000"
        minThroughput: "125"
        maxThroughput: "1000"
        defaultThroughput: "125"
      properties:
        volumePropertiesId:
          type: string
        volumePropertiesName:
          type: string
        minDiskSize:
          type: string
        maxDiskSize:
          type: string
        minIops:
          type: string
        maxIops:
          type: string
        defaultIops:
          type: string
        minThroughput:
          type: string
        maxThroughput:
          type: string
        defaultThroughput:
          type: string
      required:
      - volumePropertiesId
      - volumePropertiesName
      type: object
    clusterDetail:
      additionalProperties: false
      example:
        clusterId: p-123
        clusterName: My Cluster
        clusterArchitecture:
          clusterArchitectureId: ha
          clusterArchitectureName: High Availability
          nodes: 3
        privateNetworking: false
        backupRetentionPeriod: 30d
        phase: Modification in progress
        replicas: 1
        createdAt:
          seconds: 1651658876
          nanos: 0
        allowedIpRanges:
        - cidrBlock: 252.1.1.1/24
          description: New York
        - cidrBlock: 167.3.2.1/32
          description: Boston
        pgConfig:
        - name: application_name
          value: restore-test
        - name: array_nulls
          value: "off"
        pgType:
          pgTypeId: epas
          pgTypeName: EDB Postgres Advanced Server
        pgVersion:
          pgVersionId: "13"
          pgVersionName: "13"
        provider:
          cloudProviderId: azure
          cloudProviderName: Azure
          connected: false
        readOnlyConnections: false
        region:
          regionId: australiaeast
          regionName: (Asia Pacific) Australia East
        instanceType:
          instanceTypeId: azure:Standard_D16s_v3
          instanceTypeName: D16s v3
          ram: 64
          category: General Purpose
          cpu: 16
          familyName: Standard DSv3 Family vCPUs
        storage:
          volumeTypeId: azurepremiumstorage
          volumePropertiesId: P1
          iops: "120"
          size: 4 Gi
          throughput: "25"
        resizingPvc: []
        conditions:
        - conditionStatus: "True"
          reason: DiskConfigured
          message: Configured
          type: DiskTuner
      properties:
        clusterId:
          type: string
        clusterName:
          type: string
        clusterArchitecture:
          $ref: '#/components/schemas/clusterDetail_clusterArchitecture'
        privateNetworking:
          type: boolean
        backupRetentionPeriod:
          type: string
        phase:
          type: string
        replicas:
          deprecated: true
          type: number
        createdAt:
          $ref: '#/components/schemas/pointInTime'
        deletedAt:
          $ref: '#/components/schemas/pointInTime'
        expiredAt:
          $ref: '#/components/schemas/pointInTime'
        firstRecoverabilityPointAt:
          $ref: '#/components/schemas/pointInTime'
        allowedIpRanges:
          items:
            $ref: '#/components/schemas/allowedIpRange'
          type: array
        pgConfig:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
        pgType:
          $ref: '#/components/schemas/pgType'
        pgVersion:
          $ref: '#/components/schemas/pgVersion'
        provider:
          $ref: '#/components/schemas/cloudProvider'
        readOnlyConnections:
          type: boolean
        region:
          $ref: '#/components/schemas/cloudProviderRegion'
        resizingPvc:
          items:
            type: string
          type: array
        conditions:
          items:
            $ref: '#/components/schemas/clusterDetail_conditions_inner'
          type: array
        instanceType:
          $ref: '#/components/schemas/cloudProviderRegionInstanceType'
        storage:
          $ref: '#/components/schemas/clusterDetail_storage'
        evaluatedPgConfig:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
      required:
      - allowedIpRanges
      - backupRetentionPeriod
      - clusterId
      - clusterName
      - conditions
      - phase
      - privateNetworking
      - resizingPvc
      type: object
    createCluster:
      additionalProperties: false
      example:
        clusterName: My Cluster
        password: perfectenschlag
        privateNetworking: false
        replicas: 1
        allowedIpRanges:
        - cidrBlock: 252.1.1.1/24
          description: New York
        - cidrBlock: 167.3.2.1/32
          description: Boston
        pgConfig:
        - name: application_name
          value: restore-test
        - name: array_nulls
          value: "off"
        pgType:
          pgTypeId: epas
        pgVersion:
          pgVersionId: "13"
        provider:
          cloudProviderId: azure
        readOnlyConnections: false
        region:
          regionId: australiaeast
        instanceType:
          instanceTypeId: azure:Standard_D16s_v3
        storage:
          volumeTypeId: azurepremiumstorage
          volumePropertiesId: P1
          iops: "120"
          size: 4 Gi
        clusterArchitecture:
          clusterArchitectureId: single
          nodes: 1
        backupRetentionPeriod: 6d
      properties:
        clusterName:
          type: string
        password:
          type: string
        pgType:
          $ref: '#/components/schemas/createCluster_pgType'
        pgVersion:
          $ref: '#/components/schemas/createCluster_pgVersion'
        provider:
          $ref: '#/components/schemas/createCluster_provider'
        readOnlyConnections:
          type: boolean
        region:
          $ref: '#/components/schemas/activateRegion_202_response_data'
        instanceType:
          $ref: '#/components/schemas/createCluster_instanceType'
        storage:
          $ref: '#/components/schemas/createCluster_storage'
        privateNetworking:
          type: boolean
        allowedIpRanges:
          items:
            $ref: '#/components/schemas/allowedIpRange'
          type: array
        pgConfig:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
        replicas:
          deprecated: true
          type: number
        clusterArchitecture:
          $ref: '#/components/schemas/createCluster_clusterArchitecture'
        backupRetentionPeriod:
          type: string
      required:
      - allowedIpRanges
      - clusterName
      - instanceType
      - password
      - pgConfig
      - pgType
      - pgVersion
      - privateNetworking
      - provider
      - region
      - storage
      type: object
    "412":
      additionalProperties: false
      example:
        error:
          status: 412
          message: Precondition failed
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    updateCluster:
      additionalProperties: false
      example:
        clusterName: My Cluster
        password: perfectenschlag
        privateNetworking: false
        replicas: 1
        allowedIpRanges:
        - cidrBlock: 252.1.1.1/24
          description: New York
        - cidrBlock: 167.3.2.1/32
          description: Boston
        pgConfig:
        - name: application_name
          value: restore-test
        - name: array_nulls
          value: "off"
        instanceType:
          instanceTypeId: azure:Standard_D16s_v3
        readOnlyConnections: false
        storage:
          volumeTypeId: azurepremiumstorage
          volumePropertiesId: P1
          iops: "120"
          size: 4 Gi
        clusterArchitecture:
          clusterArchitectureId: single
          nodes: 1
        backupRetentionPeriod: 6w
      properties:
        clusterName:
          type: string
        password:
          type: string
        instanceType:
          $ref: '#/components/schemas/createCluster_instanceType'
        readOnlyConnections:
          type: boolean
        storage:
          $ref: '#/components/schemas/createCluster_storage'
        privateNetworking:
          type: boolean
        allowedIpRanges:
          items:
            $ref: '#/components/schemas/allowedIpRange'
          type: array
        pgConfig:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
        replicas:
          deprecated: true
          type: number
        clusterArchitecture:
          $ref: '#/components/schemas/createCluster_clusterArchitecture'
        backupRetentionPeriod:
          type: string
      required:
      - allowedIpRanges
      - clusterName
      - instanceType
      - pgConfig
      - privateNetworking
      - storage
      type: object
    patchCluster:
      additionalProperties: false
      example:
        clusterName: My Cluster
        password: perfectenschlag
        privateNetworking: false
        replicas: 1
        allowedIpRanges:
        - cidrBlock: 252.1.1.1/24
          description: New York
        - cidrBlock: 167.3.2.1/32
          description: Boston
        pgConfig:
        - name: application_name
          value: restore-test
        - name: array_nulls
          value: "off"
        instanceType:
          instanceTypeId: azure:Standard_D16s_v3
        readOnlyConnections: false
        storage:
          volumeTypeId: azurepremiumstorage
          volumePropertiesId: P1
          iops: "120"
          size: 4 Gi
        clusterArchitecture:
          clusterArchitectureId: single
          nodes: 1
        backupRetentionPeriod: 6w
      properties:
        clusterName:
          type: string
        password:
          type: string
        instanceType:
          $ref: '#/components/schemas/createCluster_instanceType'
        readOnlyConnections:
          type: boolean
        storage:
          $ref: '#/components/schemas/patchCluster_storage'
        privateNetworking:
          type: boolean
        allowedIpRanges:
          items:
            $ref: '#/components/schemas/allowedIpRange'
          type: array
        pgConfig:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
        replicas:
          deprecated: true
          type: number
        clusterArchitecture:
          $ref: '#/components/schemas/createCluster_clusterArchitecture'
        backupRetentionPeriod:
          type: string
      type: object
    restoreCluster:
      additionalProperties: false
      example:
        backupRetentionPeriod: 6d
        selectedRestorePointInTime: 2020-01-01T00:00:00.000Z
        clusterName: My Cluster
        password: perfectenschlag
        replicas: 1
        allowedIpRanges:
        - cidrBlock: 252.1.1.1/24
          description: New York
        - cidrBlock: 167.3.2.1/32
          description: Boston
        pgConfig:
        - name: application_name
          value: restore-test
        - name: array_nulls
          value: "off"
        region:
          regionId: australiaeast
        instanceType:
          instanceTypeId: azure:Standard_D16s_v3
        readOnlyConnections: false
        storage:
          volumeTypeId: azurepremiumstorage
          volumePropertiesId: P1
          iops: "120"
          size: 4 Gi
        clusterArchitecture:
          clusterArchitectureId: single
          nodes: 1
      properties:
        backupRetentionPeriod:
          type: string
        selectedRestorePointInTime:
          type: string
        clusterName:
          type: string
        password:
          type: string
        region:
          $ref: '#/components/schemas/activateRegion_202_response_data'
        instanceType:
          $ref: '#/components/schemas/createCluster_instanceType'
        storage:
          $ref: '#/components/schemas/createCluster_storage'
        allowedIpRanges:
          items:
            $ref: '#/components/schemas/allowedIpRange'
          type: array
        pgConfig:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
        replicas:
          deprecated: true
          type: number
        readOnlyConnections:
          type: boolean
        clusterArchitecture:
          $ref: '#/components/schemas/createCluster_clusterArchitecture'
      required:
      - allowedIpRanges
      - clusterName
      - instanceType
      - password
      - pgConfig
      - region
      - storage
      type: object
    clusterConnection:
      additionalProperties: true
      example:
        databaseName: postgres
        pgUri: postgresql://edb_admin@p-clusterId.orgId.biganimal.io:5432/edb_admin
        port: "5432"
        readOnlyPgUri: postgresql://edb_admin@p-clusterId-r.orgId.biganimal.io:5432/edb_admin
        readOnlyPort: "5432"
        readOnlyServiceName: my-cluster-r
        serviceName: my-cluster-rw
        username: postgres
      properties:
        databaseName:
          type: string
        pgUri:
          type: string
        port:
          type: string
        readOnlyPgUri:
          type: string
        readOnlyPort:
          type: string
        readOnlyServiceName:
          type: string
        serviceName:
          type: string
        username:
          type: string
      required:
      - databaseName
      - port
      - serviceName
      - username
      type: object
    clusterPhase:
      additionalProperties: true
      example:
        id: 1
        name: Cluster creation request received
        category: create cluster
        effectiveAt:
          seconds: 1
          nanos: 1
      properties:
        id:
          type: number
        name:
          type: string
        category:
          type: string
        effectiveAt:
          $ref: '#/components/schemas/pointInTime'
      required:
      - category
      - id
      - name
      type: object
    clusterPgConfigParameter:
      allOf:
      - $ref: '#/components/schemas/pgConfigParameter'
      - $ref: '#/components/schemas/clusterPgConfigParameter_allOf'
      example:
        bootValue: "32"
        category: Write-Ahead Log / Checkpoints
        cnpoControlled: false
        context: sighup
        enumValues: []
        extraDesc: ""
        initDB: false
        maxValue: "256"
        minValue: "0"
        name: checkpoint_flush_after
        readOnly: false
        readOnlyValue: ""
        resetValue: "32"
        shortDesc: Number of pages after which previously performed writes are flushed
          to disk.
        source: default
        unit: 8kB
        varType: integer
        currentValue: "10"
      required:
      - currentValue
      type: object
    event:
      additionalProperties: false
      example:
        createdAt:
          seconds: 0
          nanos: 0
        sessionId: abc-123
        ipAddress: 192.168.1.1
        user:
          name: Bob
          role: admin
          group: admins
        resource:
          id: "1"
          type: storage
          name: v-ssd-1
        action:
          type: 2
          transform: grow
      properties:
        action:
          $ref: '#/components/schemas/event_action'
        user:
          $ref: '#/components/schemas/runSearchForEvents_request_user'
        resource:
          $ref: '#/components/schemas/event_resource'
        ipAddress:
          type: string
        sessionId:
          type: string
        createdAt:
          $ref: '#/components/schemas/pointInTime'
      required:
      - ipAddress
      - sessionId
      type: object
    "415":
      additionalProperties: false
      example:
        error:
          status: 415
          message: Unsupported Media Type
          reference: requestI123456789d
          errors:
          - message: detail of the error message
      properties:
        error:
          $ref: '#/components/schemas/_401_error'
      type: object
    eventsMetadata:
      additionalProperties: false
      example:
        values:
        - values
        - values
        type: type
      properties:
        type:
          type: string
        values:
          items:
            type: string
          type: array
      required:
      - type
      - values
      type: object
    integrationsAzureEvent:
      additionalProperties: true
      properties:
        id:
          description: "The operation ID in Azure, will call with Azure operation\
            \ GET API"
          type: string
        activityId:
          description: Provided by Azure. We store it for future usage
          type: string
        subscriptionId:
          description: The GUID identifier for the SaaS resource which status changes
          type: string
        publisherId:
          description: A unique string identifier for each publisher
          example: contoso
          type: string
        offerId:
          description: A unique string identifier for each offer
          example: offer1
          type: string
        planId:
          description: The most up-to-date plan ID
          example: silver
          type: string
        quantity:
          description: "The most up-to-date number of seats, can be empty if not relevant"
          example: 25
          type: integer
        timeStamp:
          description: The UTC time when the webhook was called
          example: 2019-04-15T20:17:31.7350641Z
          type: string
        action:
          description: The operation the webhook notifies about
          example: ChangeQuantity
          type: string
        status:
          description: Can be either InProgress or Success
          example: Success
          type: string
      type: object
    evaluatePgConfig:
      additionalProperties: false
      example:
        machineSettings:
        - - ram
          - 16777216 kB
        - - cpu_cores
          - "4"
        - - disk_size
          - 1TB
        - - disk_iops
          - "40000"
        - - replica_count
          - "1"
        pgConfig:
        - - work_mem
          - 10 MB
        pgTypeId: postgres
        pgVersionId: "13"
      properties:
        machineSettings:
          items:
            items:
              type: string
            type: array
          type: array
        pgConfig:
          items:
            items:
              type: string
            type: array
          type: array
        pgTypeId:
          type: string
        pgVersionId:
          type: string
      required:
      - machineSettings
      - pgConfig
      - pgTypeId
      - pgVersionId
      type: object
    pgConfigEvaluate:
      additionalProperties: true
      example:
        name: name
        value: value
        status: status
      properties:
        name:
          type: string
        value:
          type: string
        status:
          type: string
      required:
      - name
      - status
      - value
      type: object
    pgConfigTemplate:
      additionalProperties: false
      example:
        pgConfigTemplateId: ea932f61-5c41-466c-80c5-5e4dd77f8777
        pgTypeId: postgres
        pgTypeName: Postgres
        pgVersionId: "13"
        pgVersionName: "13"
        templateName: my template name
        templateDescription: my template description
      properties:
        pgConfigTemplateId:
          type: string
        pgTypeId:
          type: string
        pgTypeName:
          type: string
        pgVersionId:
          type: string
        pgVersionName:
          type: string
        templateName:
          type: string
        templateDescription:
          type: string
      required:
      - pgConfigTemplateId
      - pgTypeId
      - pgVersionId
      - templateName
      type: object
    createPgConfigTemplate:
      additionalProperties: false
      example:
        machineSettings:
        - - ram
          - 16777216 kB
        - - cpu_cores
          - "4"
        - - disk_size
          - 1TB
        - - disk_iops
          - "40000"
        - - replica_count
          - "1"
        pgTypeId: postgres
        pgVersionId: "13"
        templateDescription: my template description
        templateName: my template
        templateSettings:
        - - work_mem
          - 20MB
      properties:
        machineSettings:
          items:
            items:
              type: string
            type: array
          type: array
        pgTypeId:
          type: string
        pgVersionId:
          type: string
        templateDescription:
          type: string
        templateName:
          type: string
        templateSettings:
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - machineSettings
      - pgTypeId
      - pgVersionId
      - templateDescription
      - templateName
      - templateSettings
      type: object
    updatePgConfigTemplate:
      additionalProperties: false
      example:
        machineSettings:
        - - ram
          - 16777216 kB
        - - cpu_cores
          - "4"
        - - disk_size
          - 1TB
        - - disk_iops
          - "40000"
        - - replica_count
          - "1"
        templateDescription: edit template description
        templateName: template name
        templateSettings:
        - - work_mem
          - 40MB
      properties:
        machineSettings:
          items:
            items:
              type: string
            type: array
          type: array
        templateDescription:
          type: string
        templateName:
          type: string
        templateSettings:
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - templateName
      type: object
    evaluatePgConfigTemplate:
      additionalProperties: false
      example:
        machineSettings:
        - - ram
          - 16777216 kB
        - - cpu_cores
          - "4"
        - - disk_size
          - 1TB
        - - disk_iops
          - "40000"
        - - replica_count
          - "1"
        pgConfigTemplateId: 140c883f-c8d8-4786-ba50-e4b0b39dcd7d
      properties:
        machineSettings:
          items:
            items:
              type: string
            type: array
          type: array
        pgConfigTemplateId:
          type: string
      required:
      - machineSettings
      - pgConfigTemplateId
      type: object
    pgConfigTemplatePgConfig:
      additionalProperties: false
      example:
        pgConfig:
        - - work_mem
          - "10240"
      properties:
        pgConfig:
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - pgConfig
      type: object
    pgConfigParameter:
      example:
        bootValue: "32"
        category: Write-Ahead Log / Checkpoints
        cnpoControlled: false
        context: sighup
        enumValues: []
        extraDesc: ""
        initDB: false
        maxValue: "256"
        minValue: "0"
        name: checkpoint_flush_after
        readOnly: false
        readOnlyValue: ""
        resetValue: "32"
        shortDesc: Number of pages after which previously performed writes are flushed
          to disk.
        source: default
        unit: 8kB
        varType: integer
      properties:
        name:
          type: string
        unit:
          type: string
        category:
          type: string
        shortDesc:
          type: string
        extraDesc:
          type: string
        context:
          type: string
        initDB:
          type: boolean
        varType:
          type: string
        source:
          type: string
        minValue:
          type: string
        maxValue:
          type: string
        enumValues:
          items:
            type: string
          type: array
        cnpoControlled:
          type: boolean
        bootValue:
          type: string
        resetValue:
          type: string
        readOnly:
          type: boolean
        readOnlyValue:
          type: string
      required:
      - bootValue
      - name
      - readOnly
      - readOnlyValue
      - resetValue
      - unit
      - varType
      type: object
    pgType:
      additionalProperties: false
      example:
        pgTypeId: EPAS
        pgTypeName: EDB Postgres Advanced Server
        supportedClusterArchitectureIds:
        - single
        - ha
      properties:
        pgTypeId:
          type: string
        pgTypeName:
          type: string
        supportedClusterArchitectureIds:
          items:
            type: string
          type: array
      required:
      - pgTypeId
      - pgTypeName
      type: object
    pgVersion:
      additionalProperties: false
      example:
        pgVersionId: "14"
        pgVersionName: "14"
      properties:
        pgVersionId:
          type: string
        pgVersionName:
          type: string
      required:
      - pgVersionId
      - pgVersionName
      type: object
    region:
      additionalProperties: false
      example:
        cloudProviderId: azure
        cloudProviderName: Azure
        clusterCount: 1
        continent: North America
        regionId: canadacentral
        regionName: Canada Central
        status: ACTIVE
      properties:
        cloudProviderId:
          type: string
        cloudProviderName:
          type: string
        clusterCount:
          type: number
        continent:
          type: string
        regionId:
          type: string
        regionName:
          type: string
        status:
          type: string
      required:
      - cloudProviderId
      - cloudProviderName
      - clusterCount
      - continent
      - regionId
      - regionName
      - status
      type: object
    registerSubscription:
      $ref: '#/components/schemas/subscription'
    subscription:
      additionalProperties: false
      example:
        principalName: Alpha
        principalSecret: Beta
        azSubId: abcde123456
        azResourceGroup: Gamma
        orgName: MyOrg
      properties:
        principalName:
          type: string
        principalSecret:
          type: string
        azSubId:
          type: string
        azResourceGroup:
          type: string
        orgName:
          type: string
      required:
      - azSubId
      - orgName
      - principalName
      - principalSecret
      type: object
    role:
      additionalProperties: false
      example:
        roleName: admin
        roleId: adc
        roleDescription: owner
      properties:
        roleName:
          type: string
        roleId:
          type: string
        roleDescription:
          type: string
      required:
      - roleDescription
      - roleId
      - roleName
      type: object
    rolePermissions:
      additionalProperties: false
      properties:
        permissionIds:
          items:
            type: string
          type: array
      required:
      - permissionIds
      type: object
    user:
      additionalProperties: false
      example:
        userId: user_1
        firstName: Nick
        lastName: Stott
        fullName: Nick Stott
        email: nick.stott@example.com
        organizationName: EDB
        roles:
        - roleId: adc
          roleName: admin
          roleDescription: God
        - roleId: usr
          roleName: user
          roleDescription: BFU
      properties:
        userId:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        picture:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/role'
          type: array
      required:
      - email
      - firstName
      - lastName
      - userId
      type: object
    statusMaintenanceWindow:
      additionalProperties: false
      example:
        statusMaintenanceWindowId: YDGVL62
        startsAt:
          seconds: 1633906020
          nanos: 0
        endsAt:
          seconds: 1633992420
          nanos: 0
      properties:
        statusMaintenanceWindowId:
          type: string
        startsAt:
          $ref: '#/components/schemas/pointInTime'
        endsAt:
          $ref: '#/components/schemas/pointInTime'
      required:
      - endsAt
      - startsAt
      - statusMaintenanceWindowId
      type: object
    statusOutage:
      example: Service 1
      type: string
    usage:
      additionalProperties: false
      example:
        usages:
        - clusterId: p-xclrpkpnf2
          clusterName: restored_amol_0118
          cloudProvider:
            cloudProviderId: azure
            cloudProviderName: Azure
          pgType:
            pgTypeId: epas
            pgTypeName: EnterpriseDB PostgreSQL Advanced Server (EPAS)
          vcpuHours: 67.15993677166666
          clusterArchitecture:
            clusterArchitectureId: single
            clusterArchitectureName: Single Node
        totals:
          clusters: 1
          vcpuHours: 67.15993677166666
      properties:
        usages:
          items:
            $ref: '#/components/schemas/clusterUsage'
          type: array
        totals:
          $ref: '#/components/schemas/usage_totals'
      required:
      - totals
      - usages
      type: object
    userRoles:
      additionalProperties: false
      properties:
        roleIds:
          items:
            type: string
          type: array
      required:
      - roleIds
      type: object
    connections:
      additionalProperties: false
      example:
        connectionId: 1350f202-9501-4ba8-8f54-f4230020899e
        strategy: GENERIC_OIDC
        brokerConnOptions:
          oidc:
            clientId: alpabetagamma
            clientSecret: deltaiotazeta
      properties:
        connectionId:
          type: string
        strategy:
          enum:
          - UNKNOWN_STRATEGY
          - GENERIC_OIDC
          - GENERIC_SAML
          - WAAD_OIDC
          type: string
        brokerConnOptions:
          $ref: '#/components/schemas/connections_brokerConnOptions'
      required:
      - brokerConnOptions
      - connectionId
      - strategy
      type: object
    userInfo:
      additionalProperties: true
      example:
        organizationId: org_brCxzr08qr7RBEi1
        organizationType: DBMgtaaS
        aadUpn: pramod.ahire@edbpostgres.com
        name: pramod ahire
        organizationTier: azuremp-normal
        userId: waad|5rAIS1R5pW9m5KZvzG059Vw_CFK7GpSKOfGLr-BvuGo
        email: pramod.ahire@edbpostgres.com
      properties:
        name:
          example: pramod ahire
          type: string
        userId:
          example: waad|5rAIS1R5pW9m5KZvzG059Vw_CFK7GpSKOfGLr-BvuGo
          type: string
        organizationId:
          example: org_brCxzr08qr7RBEi1
          type: string
        aadUpn:
          example: pramod.ahire@edbpostgres.com
          type: string
        email:
          example: pramod.ahire@edbpostgres.com
          type: string
        organizationType:
          example: DBMgtaaS
          type: string
        organizationTier:
          example: azuremp-normal
          type: string
      type: object
    registerAws:
      properties:
        externalId:
          type: string
        roleArn:
          type: string
        policyArn:
          type: string
      required:
      - externalId
      - roleArn
      type: object
    registerAzure:
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        subscriptionId:
          type: string
        tenantId:
          type: string
      required:
      - clientId
      - clientSecret
      - subscriptionId
      - tenantId
      type: object
    pointInTime:
      example:
        seconds: 123123213
        nanos: 0
      properties:
        seconds:
          type: number
        nanos:
          type: number
      required:
      - nanos
      - seconds
      type: object
    clusterCharge:
      additionalProperties: false
      example:
        vcpuHours: 0.8008281904610115
        clusterId: clusterId
      properties:
        clusterId:
          type: string
        vcpuHours:
          type: number
      required:
      - clusterId
      - vcpuHours
      type: object
    allowedIpRange:
      additionalProperties: false
      example:
        cidrBlock: 145.32.6.1/32
        description: New York
      properties:
        cidrBlock:
          type: string
        description:
          type: string
      required:
      - cidrBlock
      - description
      type: object
    clusterUsage:
      additionalProperties: false
      properties:
        clusterId:
          type: string
        clusterName:
          type: string
        pgType:
          $ref: '#/components/schemas/clusterUsage_pgType'
        cloudProvider:
          $ref: '#/components/schemas/clusterUsage_cloudProvider'
        vcpuHours:
          type: number
        clusterArchitecture:
          $ref: '#/components/schemas/clusterUsage_clusterArchitecture'
        clusterCreationTime:
          $ref: '#/components/schemas/pointInTime'
      required:
      - cloudProvider
      - clusterId
      - clusterName
      - pgType
      - vcpuHours
      type: object
    getAccountClustersOverview_200_response:
      additionalProperties: false
      example:
        data:
        - organizationId: myOrg
          cloudProviderId: azure
          cloudProviderName: Azure
          clusterRegions:
          - regionName: West US 2
            clusterCount: 1
            regionId: westus2
          - regionName: East US
            clusterCount: 2
            regionId: eastus
        - organizationId: myOrg
          cloudProviderId: azure
          cloudProviderName: Azure
          clusterRegions:
          - regionName: West US 2
            clusterCount: 1
            regionId: westus2
          - regionName: East US
            clusterCount: 2
            regionId: eastus
      properties:
        data:
          items:
            $ref: '#/components/schemas/clusterEstate'
          type: array
      required:
      - data
      type: object
    getAccountNews_200_response:
      additionalProperties: false
      example:
        data:
        - title: Agency for Restructuring and Modernization of Agriculture (ARiMR)
            Uses EDB to Improve Availability of Critical Beneficiary Support Systems
          url: https://www.enterprisedb.com/blog/agency-restructuring-and-modernization-agriculture-arimr-uses-edb-improve-availability
          createdAt:
            seconds: 123123213
            nanos: 0
        - title: Agency for Restructuring and Modernization of Agriculture (ARiMR)
            Uses EDB to Improve Availability of Critical Beneficiary Support Systems
          url: https://www.enterprisedb.com/blog/agency-restructuring-and-modernization-agriculture-arimr-uses-edb-improve-availability
          createdAt:
            seconds: 123123213
            nanos: 0
      properties:
        data:
          items:
            $ref: '#/components/schemas/accountNews'
          type: array
      required:
      - data
      type: object
    getAccountNotifications_200_response:
      additionalProperties: false
      example:
        data:
        - accountNotificationId: "1"
          clusterName: development_1
          description: Query sort operations are splitting into disc (Arox 100MB)
            - Increase work memory for better performance
          notificationType: alert
          objectName: test_table
          title: Slow Query on test_table
        - accountNotificationId: "1"
          clusterName: development_1
          description: Query sort operations are splitting into disc (Arox 100MB)
            - Increase work memory for better performance
          notificationType: alert
          objectName: test_table
          title: Slow Query on test_table
      properties:
        data:
          items:
            $ref: '#/components/schemas/accountNotification'
          type: array
      required:
      - data
      type: object
    getOrganizationSettings_200_response:
      additionalProperties: false
      example:
        data:
          version: 1
          preferredRegion: eastus
          promotions:
            oracle: true
          blankSlate:
            teamInvited: true
            rolesAssigned: true
            azureConfigured: false
      properties:
        data:
          additionalProperties: true
          example:
            version: 1
            preferredRegion: eastus
            promotions:
              oracle: true
            blankSlate:
              teamInvited: true
              rolesAssigned: true
              azureConfigured: false
          type: object
      required:
      - data
      type: object
    getAccountTrialUsage_200_response:
      additionalProperties: false
      example:
        data:
          orgId: org_MyOrg
          expireAt:
            seconds: 123123213
            nanos: 0
          cloudProviderUsages:
          - orgId: org_MyOrg
            cloudProviderId: aws
            cloudProviderName: AWS
            expireAt:
              seconds: 123123213
              nanos: 0
          - orgId: org_MyOrg
            cloudProviderId: azure
            cloudProviderName: Azure
            expireAt:
              seconds: 123123213
              nanos: 0
            clusterUsages:
            - orgId: org_MyOrg
              cloudProviderId: azure
              clusterId: p-0000000001
            - orgId: org_MyOrg
              cloudProviderId: azure
              clusterId: p-0000000002
      properties:
        data:
          $ref: '#/components/schemas/trialUsage'
      required:
      - data
      type: object
    getProvider_200_response:
      additionalProperties: false
      example:
        clientId: clientId
        issuerUri: issuerUri
        scope: scope
        uiClientId: uiClientId
        freetrialClientId: freetrialClientId
      properties:
        clientId:
          type: string
        freetrialClientId:
          type: string
        issuerUri:
          type: string
        scope:
          type: string
        uiClientId:
          type: string
      required:
      - clientId
      - freetrialClientId
      - issuerUri
      - scope
      - uiClientId
      type: object
    getBilling_200_response:
      additionalProperties: false
      example:
        data:
          totalVcpuHours: 6.027456183070403
          clusterCharges:
          - vcpuHours: 0.8008281904610115
            clusterId: clusterId
          - vcpuHours: 0.8008281904610115
            clusterId: clusterId
      properties:
        data:
          $ref: '#/components/schemas/billing'
      required:
      - data
      type: object
    getClusterArchitectures_200_response:
      additionalProperties: false
      example:
        data:
        - clusterArchitectureId: eha
          clusterArchitectureName: Extreme High Availability
          enabled: true
        - clusterArchitectureId: eha
          clusterArchitectureName: Extreme High Availability
          enabled: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/clusterArchitecture'
          type: array
      required:
      - data
      type: object
    getCloudProviders_200_response:
      additionalProperties: false
      example:
        data:
        - cloudProviderId: azure
          cloudProviderName: Azure
          connected: true
        - cloudProviderId: azure
          cloudProviderName: Azure
          connected: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/cloudProvider'
          type: array
      required:
      - data
      type: object
    getRegisteredCloudProvider_200_response:
      additionalProperties: false
      example:
        policyArn: policyArn
        roleArn: roleArn
        externalId: externalId
      properties:
        externalId:
          type: string
        roleArn:
          type: string
        policyArn:
          type: string
      type: object
    createCloudProvider_request:
      oneOf:
      - $ref: '#/components/schemas/registerAws'
      - $ref: '#/components/schemas/registerAzure'
    createCloudProvider_200_response:
      additionalProperties: true
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    getCloudProviderRegions_200_response:
      additionalProperties: false
      example:
        data:
        - regionId: azure:Canada East
          regionName: Canada East
          status: Active
          continent: Americas
        - regionId: azure:Canada East
          regionName: Canada East
          status: Active
          continent: Americas
      properties:
        data:
          items:
            $ref: '#/components/schemas/cloudProviderRegion'
          type: array
      required:
      - data
      type: object
    activateRegion_202_response_data:
      additionalProperties: false
      example:
        regionId: regionId
      properties:
        regionId:
          type: string
      required:
      - regionId
      type: object
    activateRegion_202_response:
      additionalProperties: false
      example:
        data:
          regionId: regionId
      properties:
        data:
          $ref: '#/components/schemas/activateRegion_202_response_data'
      required:
      - data
      type: object
    getCloudProviderRegionInstanceTypes_200_response:
      additionalProperties: false
      example:
        data:
        - instanceTypeId: "1"
          instanceTypeName: Instance Type
          ram: 2
          cpu: 16
          familyName: Standard vCPUs
          category: Memory Optimized
        - instanceTypeId: "1"
          instanceTypeName: Instance Type
          ram: 2
          cpu: 16
          familyName: Standard vCPUs
          category: Memory Optimized
      properties:
        data:
          items:
            $ref: '#/components/schemas/cloudProviderRegionInstanceType'
          type: array
      required:
      - data
      type: object
    getCloudProviderRegionVolumeTypes_200_response:
      additionalProperties: false
      example:
        data:
        - volumeTypeId: "1"
          volumeTypeName: Microsoft Azure File volume (SMB)
          storageClass: azureDisk
          enabledInRegion: true
          supportedInstanceFamilyNames:
          - Standard ESv3 Family vCPUs
          - Standard ESv4 Family vCPUs
        - volumeTypeId: "1"
          volumeTypeName: Microsoft Azure File volume (SMB)
          storageClass: azureDisk
          enabledInRegion: true
          supportedInstanceFamilyNames:
          - Standard ESv3 Family vCPUs
          - Standard ESv4 Family vCPUs
      properties:
        data:
          items:
            $ref: '#/components/schemas/cloudProviderRegionVolumeType'
          type: array
      required:
      - data
      type: object
    getVolumeProperties_200_response:
      additionalProperties: false
      example:
        data:
        - volumePropertiesId: gp3
          volumePropertiesName: "gp3 (1 Gi - 16384 Gi, 3000 IOPS, 125 MiB/s tput)"
          minDiskSize: 1 Gi
          maxDiskSize: 16384 Gi
          minIops: "3000"
          maxIops: "16000"
          defaultIops: "3000"
          minThroughput: "125"
          maxThroughput: "1000"
          defaultThroughput: "125"
        - volumePropertiesId: gp3
          volumePropertiesName: "gp3 (1 Gi - 16384 Gi, 3000 IOPS, 125 MiB/s tput)"
          minDiskSize: 1 Gi
          maxDiskSize: 16384 Gi
          minIops: "3000"
          maxIops: "16000"
          defaultIops: "3000"
          minThroughput: "125"
          maxThroughput: "1000"
          defaultThroughput: "125"
      properties:
        data:
          items:
            $ref: '#/components/schemas/volumeProperties'
          type: array
      required:
      - data
      type: object
    getClusters_200_response:
      additionalProperties: false
      example:
        data:
        - clusterId: p-123
          clusterName: My Cluster
          clusterArchitecture:
            clusterArchitectureId: ha
            clusterArchitectureName: High Availability
            nodes: 3
          privateNetworking: false
          backupRetentionPeriod: 30d
          phase: Modification in progress
          replicas: 1
          createdAt:
            seconds: 1651658876
            nanos: 0
          allowedIpRanges:
          - cidrBlock: 252.1.1.1/24
            description: New York
          - cidrBlock: 167.3.2.1/32
            description: Boston
          pgConfig:
          - name: application_name
            value: restore-test
          - name: array_nulls
            value: "off"
          pgType:
            pgTypeId: epas
            pgTypeName: EDB Postgres Advanced Server
          pgVersion:
            pgVersionId: "13"
            pgVersionName: "13"
          provider:
            cloudProviderId: azure
            cloudProviderName: Azure
            connected: false
          readOnlyConnections: false
          region:
            regionId: australiaeast
            regionName: (Asia Pacific) Australia East
          instanceType:
            instanceTypeId: azure:Standard_D16s_v3
            instanceTypeName: D16s v3
            ram: 64
            category: General Purpose
            cpu: 16
            familyName: Standard DSv3 Family vCPUs
          storage:
            volumeTypeId: azurepremiumstorage
            volumePropertiesId: P1
            iops: "120"
            size: 4 Gi
            throughput: "25"
          resizingPvc: []
          conditions:
          - conditionStatus: "True"
            reason: DiskConfigured
            message: Configured
            type: DiskTuner
        - clusterId: p-123
          clusterName: My Cluster
          clusterArchitecture:
            clusterArchitectureId: ha
            clusterArchitectureName: High Availability
            nodes: 3
          privateNetworking: false
          backupRetentionPeriod: 30d
          phase: Modification in progress
          replicas: 1
          createdAt:
            seconds: 1651658876
            nanos: 0
          allowedIpRanges:
          - cidrBlock: 252.1.1.1/24
            description: New York
          - cidrBlock: 167.3.2.1/32
            description: Boston
          pgConfig:
          - name: application_name
            value: restore-test
          - name: array_nulls
            value: "off"
          pgType:
            pgTypeId: epas
            pgTypeName: EDB Postgres Advanced Server
          pgVersion:
            pgVersionId: "13"
            pgVersionName: "13"
          provider:
            cloudProviderId: azure
            cloudProviderName: Azure
            connected: false
          readOnlyConnections: false
          region:
            regionId: australiaeast
            regionName: (Asia Pacific) Australia East
          instanceType:
            instanceTypeId: azure:Standard_D16s_v3
            instanceTypeName: D16s v3
            ram: 64
            category: General Purpose
            cpu: 16
            familyName: Standard DSv3 Family vCPUs
          storage:
            volumeTypeId: azurepremiumstorage
            volumePropertiesId: P1
            iops: "120"
            size: 4 Gi
            throughput: "25"
          resizingPvc: []
          conditions:
          - conditionStatus: "True"
            reason: DiskConfigured
            message: Configured
            type: DiskTuner
      properties:
        data:
          items:
            $ref: '#/components/schemas/clusterDetail'
          type: array
      required:
      - data
      type: object
    createCluster_202_response_data:
      additionalProperties: false
      example:
        clusterId: clusterId
      properties:
        clusterId:
          type: string
      required:
      - clusterId
      type: object
    createCluster_202_response:
      additionalProperties: false
      example:
        data:
          clusterId: clusterId
      properties:
        data:
          $ref: '#/components/schemas/createCluster_202_response_data'
      required:
      - data
      type: object
    getCluster_200_response:
      additionalProperties: false
      example:
        data:
          clusterId: p-123
          clusterName: My Cluster
          clusterArchitecture:
            clusterArchitectureId: ha
            clusterArchitectureName: High Availability
            nodes: 3
          privateNetworking: false
          backupRetentionPeriod: 30d
          phase: Modification in progress
          replicas: 1
          createdAt:
            seconds: 1651658876
            nanos: 0
          allowedIpRanges:
          - cidrBlock: 252.1.1.1/24
            description: New York
          - cidrBlock: 167.3.2.1/32
            description: Boston
          pgConfig:
          - name: application_name
            value: restore-test
          - name: array_nulls
            value: "off"
          pgType:
            pgTypeId: epas
            pgTypeName: EDB Postgres Advanced Server
          pgVersion:
            pgVersionId: "13"
            pgVersionName: "13"
          provider:
            cloudProviderId: azure
            cloudProviderName: Azure
            connected: false
          readOnlyConnections: false
          region:
            regionId: australiaeast
            regionName: (Asia Pacific) Australia East
          instanceType:
            instanceTypeId: azure:Standard_D16s_v3
            instanceTypeName: D16s v3
            ram: 64
            category: General Purpose
            cpu: 16
            familyName: Standard DSv3 Family vCPUs
          storage:
            volumeTypeId: azurepremiumstorage
            volumePropertiesId: P1
            iops: "120"
            size: 4 Gi
            throughput: "25"
          resizingPvc: []
          conditions:
          - conditionStatus: "True"
            reason: DiskConfigured
            message: Configured
            type: DiskTuner
      properties:
        data:
          $ref: '#/components/schemas/clusterDetail'
      required:
      - data
      type: object
    getClusterConnection_200_response:
      additionalProperties: false
      example:
        data:
          databaseName: postgres
          pgUri: postgresql://edb_admin@p-clusterId.orgId.biganimal.io:5432/edb_admin
          port: "5432"
          readOnlyPgUri: postgresql://edb_admin@p-clusterId-r.orgId.biganimal.io:5432/edb_admin
          readOnlyPort: "5432"
          readOnlyServiceName: my-cluster-r
          serviceName: my-cluster-rw
          username: postgres
      properties:
        data:
          $ref: '#/components/schemas/clusterConnection'
      required:
      - data
      type: object
    getClusterPhases_200_response:
      additionalProperties: false
      example:
        data:
        - id: 1
          name: Cluster creation request received
          category: create cluster
          effectiveAt:
            seconds: 1
            nanos: 1
        - id: 1
          name: Cluster creation request received
          category: create cluster
          effectiveAt:
            seconds: 1
            nanos: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/clusterPhase'
          type: array
      required:
      - data
      type: object
    getClusterPgConfig_200_response:
      additionalProperties: false
      example:
        data:
        - bootValue: "32"
          category: Write-Ahead Log / Checkpoints
          cnpoControlled: false
          context: sighup
          enumValues: []
          extraDesc: ""
          initDB: false
          maxValue: "256"
          minValue: "0"
          name: checkpoint_flush_after
          readOnly: false
          readOnlyValue: ""
          resetValue: "32"
          shortDesc: Number of pages after which previously performed writes are flushed
            to disk.
          source: default
          unit: 8kB
          varType: integer
          currentValue: "10"
        - bootValue: "32"
          category: Write-Ahead Log / Checkpoints
          cnpoControlled: false
          context: sighup
          enumValues: []
          extraDesc: ""
          initDB: false
          maxValue: "256"
          minValue: "0"
          name: checkpoint_flush_after
          readOnly: false
          readOnlyValue: ""
          resetValue: "32"
          shortDesc: Number of pages after which previously performed writes are flushed
            to disk.
          source: default
          unit: 8kB
          varType: integer
          currentValue: "10"
      properties:
        data:
          items:
            $ref: '#/components/schemas/clusterPgConfigParameter'
          type: array
      required:
      - data
      type: object
    runSearchForEvents_request_paging:
      additionalProperties: false
      properties:
        limit:
          minimum: 1
          type: number
        offset:
          minimum: 0
          type: number
      type: object
    runSearchForEvents_request_user:
      additionalProperties: false
      properties:
        name:
          type: string
        role:
          type: string
        group:
          type: string
      type: object
    runSearchForEvents_request_resource:
      additionalProperties: false
      properties:
        name:
          type: string
        type:
          type: string
        id:
          type: string
      type: object
    runSearchForEvents_request:
      additionalProperties: false
      properties:
        paging:
          $ref: '#/components/schemas/runSearchForEvents_request_paging'
        startAt:
          type: string
        endAt:
          type: string
        order:
          enum:
          - asc
          - desc
          type: string
        user:
          $ref: '#/components/schemas/runSearchForEvents_request_user'
        resource:
          $ref: '#/components/schemas/runSearchForEvents_request_resource'
      required:
      - endAt
      - paging
      - startAt
      type: object
    runSearchForEvents_200_response_paging:
      example:
        totalItems: 1.4658129805029452
        previousPage: 6.027456183070403
        nextPage: 0.8008281904610115
      properties:
        nextPage:
          type: number
        previousPage:
          type: number
        totalItems:
          type: number
      required:
      - nextPage
      - previousPage
      - totalItems
      type: object
    runSearchForEvents_200_response:
      additionalProperties: false
      example:
        data:
        - createdAt:
            seconds: 0
            nanos: 0
          sessionId: abc-123
          ipAddress: 192.168.1.1
          user:
            name: Bob
            role: admin
            group: admins
          resource:
            id: "1"
            type: storage
            name: v-ssd-1
          action:
            type: 2
            transform: grow
        - createdAt:
            seconds: 0
            nanos: 0
          sessionId: abc-123
          ipAddress: 192.168.1.1
          user:
            name: Bob
            role: admin
            group: admins
          resource:
            id: "1"
            type: storage
            name: v-ssd-1
          action:
            type: 2
            transform: grow
        paging:
          totalItems: 1.4658129805029452
          previousPage: 6.027456183070403
          nextPage: 0.8008281904610115
      properties:
        data:
          items:
            $ref: '#/components/schemas/event'
          type: array
        paging:
          $ref: '#/components/schemas/runSearchForEvents_200_response_paging'
      required:
      - data
      - paging
      type: object
    listMetadata_200_response:
      additionalProperties: false
      example:
        data:
        - values:
          - values
          - values
          type: type
        - values:
          - values
          - values
          type: type
      properties:
        data:
          items:
            $ref: '#/components/schemas/eventsMetadata'
          type: array
      required:
      - data
      type: object
    listPermissions_200_response:
      additionalProperties: false
      example:
        data:
        - data
        - data
      properties:
        data:
          items:
            type: string
          type: array
      required:
      - data
      type: object
    runPgConfigEvaluation_200_response:
      additionalProperties: false
      example:
        data:
        - name: name
          value: value
          status: status
        - name: name
          value: value
          status: status
      properties:
        data:
          items:
            $ref: '#/components/schemas/pgConfigEvaluate'
          type: array
      required:
      - data
      type: object
    getPgConfigTemplates_200_response:
      additionalProperties: false
      example:
        data:
        - pgConfigTemplateId: ea932f61-5c41-466c-80c5-5e4dd77f8777
          pgTypeId: postgres
          pgTypeName: Postgres
          pgVersionId: "13"
          pgVersionName: "13"
          templateName: my template name
          templateDescription: my template description
        - pgConfigTemplateId: ea932f61-5c41-466c-80c5-5e4dd77f8777
          pgTypeId: postgres
          pgTypeName: Postgres
          pgVersionId: "13"
          pgVersionName: "13"
          templateName: my template name
          templateDescription: my template description
      properties:
        data:
          items:
            $ref: '#/components/schemas/pgConfigTemplate'
          type: array
      required:
      - data
      type: object
    createPgConfigTemplate_200_response_data:
      additionalProperties: false
      example:
        pgConfigTemplateId: pgConfigTemplateId
      properties:
        pgConfigTemplateId:
          type: string
      required:
      - pgConfigTemplateId
      type: object
    createPgConfigTemplate_200_response:
      additionalProperties: false
      example:
        data:
          pgConfigTemplateId: pgConfigTemplateId
      properties:
        data:
          $ref: '#/components/schemas/createPgConfigTemplate_200_response_data'
      required:
      - data
      type: object
    getPgConfigTemplate_200_response:
      additionalProperties: false
      example:
        data:
          pgConfigTemplateId: ea932f61-5c41-466c-80c5-5e4dd77f8777
          pgTypeId: postgres
          pgTypeName: Postgres
          pgVersionId: "13"
          pgVersionName: "13"
          templateName: my template name
          templateDescription: my template description
      properties:
        data:
          $ref: '#/components/schemas/pgConfigTemplate'
      required:
      - data
      type: object
    updatePgConfigTemplate_200_response_data:
      additionalProperties: false
      example:
        pgConfigTemplateId: p-140c883f-c8d8-4786-ba50-e4b0b39dcd7d
      properties:
        pgConfigTemplateId:
          type: string
      required:
      - pgConfigTemplateId
      type: object
    updatePgConfigTemplate_200_response:
      additionalProperties: false
      example:
        data:
          pgConfigTemplateId: p-140c883f-c8d8-4786-ba50-e4b0b39dcd7d
      properties:
        data:
          $ref: '#/components/schemas/updatePgConfigTemplate_200_response_data'
      required:
      - data
      type: object
    runPgConfigTemplatesEvaluation_200_response:
      additionalProperties: false
      example:
        data:
          pgConfig:
          - - work_mem
            - "10240"
      properties:
        data:
          $ref: '#/components/schemas/pgConfigTemplatePgConfig'
      required:
      - data
      type: object
    getPgConfigParameters_200_response:
      additionalProperties: false
      example:
        data:
        - bootValue: "32"
          category: Write-Ahead Log / Checkpoints
          cnpoControlled: false
          context: sighup
          enumValues: []
          extraDesc: ""
          initDB: false
          maxValue: "256"
          minValue: "0"
          name: checkpoint_flush_after
          readOnly: false
          readOnlyValue: ""
          resetValue: "32"
          shortDesc: Number of pages after which previously performed writes are flushed
            to disk.
          source: default
          unit: 8kB
          varType: integer
        - bootValue: "32"
          category: Write-Ahead Log / Checkpoints
          cnpoControlled: false
          context: sighup
          enumValues: []
          extraDesc: ""
          initDB: false
          maxValue: "256"
          minValue: "0"
          name: checkpoint_flush_after
          readOnly: false
          readOnlyValue: ""
          resetValue: "32"
          shortDesc: Number of pages after which previously performed writes are flushed
            to disk.
          source: default
          unit: 8kB
          varType: integer
      properties:
        data:
          items:
            $ref: '#/components/schemas/pgConfigParameter'
          type: array
      required:
      - data
      type: object
    getPgTypes_200_response:
      additionalProperties: false
      example:
        data:
        - pgTypeId: EPAS
          pgTypeName: EDB Postgres Advanced Server
          supportedClusterArchitectureIds:
          - single
          - ha
        - pgTypeId: EPAS
          pgTypeName: EDB Postgres Advanced Server
          supportedClusterArchitectureIds:
          - single
          - ha
      properties:
        data:
          items:
            $ref: '#/components/schemas/pgType'
          type: array
      required:
      - data
      type: object
    getPgVersions_200_response:
      additionalProperties: false
      example:
        data:
        - pgVersionId: "14"
          pgVersionName: "14"
        - pgVersionId: "14"
          pgVersionName: "14"
      properties:
        data:
          items:
            $ref: '#/components/schemas/pgVersion'
          type: array
      required:
      - data
      type: object
    getRegions_200_response:
      additionalProperties: false
      example:
        data:
        - cloudProviderId: azure
          cloudProviderName: Azure
          clusterCount: 1
          continent: North America
          regionId: canadacentral
          regionName: Canada Central
          status: ACTIVE
        - cloudProviderId: azure
          cloudProviderName: Azure
          clusterCount: 1
          continent: North America
          regionId: canadacentral
          regionName: Canada Central
          status: ACTIVE
      properties:
        data:
          items:
            $ref: '#/components/schemas/region'
          type: array
      required:
      - data
      type: object
    createSubscription_201_response_data:
      additionalProperties: false
      example:
        result: result
        organizationId: organizationId
      properties:
        result:
          type: string
        organizationId:
          type: string
      required:
      - result
      type: object
    createSubscription_201_response:
      additionalProperties: true
      example:
        data:
          result: result
          organizationId: organizationId
      properties:
        data:
          $ref: '#/components/schemas/createSubscription_201_response_data'
      required:
      - data
      type: object
    getBeneficiaryValidation_200_response_data:
      additionalProperties: false
      example:
        result: result
      properties:
        result:
          type: string
      required:
      - result
      type: object
    getBeneficiaryValidation_200_response:
      additionalProperties: false
      example:
        data:
          result: result
      properties:
        data:
          $ref: '#/components/schemas/getBeneficiaryValidation_200_response_data'
      required:
      - data
      type: object
    getRoles_200_response:
      additionalProperties: false
      example:
        data:
        - roleName: admin
          roleId: adc
          roleDescription: owner
        - roleName: admin
          roleId: adc
          roleDescription: owner
      properties:
        data:
          items:
            $ref: '#/components/schemas/role'
          type: array
      required:
      - data
      type: object
    getRole_200_response:
      additionalProperties: false
      example:
        data:
          roleName: admin
          roleId: adc
          roleDescription: owner
      properties:
        data:
          $ref: '#/components/schemas/role'
      required:
      - data
      type: object
    assignRolePermissions_200_response_data:
      additionalProperties: false
      example:
        permissionsList:
        - permissionsList
        - permissionsList
        roleId: roleId
      properties:
        permissionsList:
          items:
            type: string
          type: array
        roleId:
          type: string
      required:
      - permissionsList
      - roleId
      type: object
    assignRolePermissions_200_response:
      additionalProperties: false
      example:
        data:
          permissionsList:
          - permissionsList
          - permissionsList
          roleId: roleId
      properties:
        data:
          $ref: '#/components/schemas/assignRolePermissions_200_response_data'
      required:
      - data
      type: object
    listRoleUsers_200_response:
      additionalProperties: false
      example:
        data:
        - userId: user_1
          firstName: Nick
          lastName: Stott
          fullName: Nick Stott
          email: nick.stott@example.com
          organizationName: EDB
          roles:
          - roleId: adc
            roleName: admin
            roleDescription: God
          - roleId: usr
            roleName: user
            roleDescription: BFU
        - userId: user_1
          firstName: Nick
          lastName: Stott
          fullName: Nick Stott
          email: nick.stott@example.com
          organizationName: EDB
          roles:
          - roleId: adc
            roleName: admin
            roleDescription: God
          - roleId: usr
            roleName: user
            roleDescription: BFU
      properties:
        data:
          items:
            $ref: '#/components/schemas/user'
          type: array
      required:
      - data
      type: object
    getMaintenanceWindows_200_response:
      additionalProperties: false
      example:
        data:
        - statusMaintenanceWindowId: YDGVL62
          startsAt:
            seconds: 1633906020
            nanos: 0
          endsAt:
            seconds: 1633992420
            nanos: 0
        - statusMaintenanceWindowId: YDGVL62
          startsAt:
            seconds: 1633906020
            nanos: 0
          endsAt:
            seconds: 1633992420
            nanos: 0
      properties:
        data:
          items:
            $ref: '#/components/schemas/statusMaintenanceWindow'
          type: array
      required:
      - data
      type: object
    getOutages_200_response:
      additionalProperties: false
      example:
        data:
        - Service 1
        - Service 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/statusOutage'
          type: array
      required:
      - data
      type: object
    getUsage_200_response:
      additionalProperties: false
      example:
        data:
          usages:
          - clusterId: p-xclrpkpnf2
            clusterName: restored_amol_0118
            cloudProvider:
              cloudProviderId: azure
              cloudProviderName: Azure
            pgType:
              pgTypeId: epas
              pgTypeName: EnterpriseDB PostgreSQL Advanced Server (EPAS)
            vcpuHours: 67.15993677166666
            clusterArchitecture:
              clusterArchitectureId: single
              clusterArchitectureName: Single Node
          totals:
            clusters: 1
            vcpuHours: 67.15993677166666
      properties:
        data:
          $ref: '#/components/schemas/usage'
      required:
      - data
      type: object
    getUser_200_response:
      additionalProperties: false
      example:
        data:
          userId: user_1
          firstName: Nick
          lastName: Stott
          fullName: Nick Stott
          email: nick.stott@example.com
          organizationName: EDB
          roles:
          - roleId: adc
            roleName: admin
            roleDescription: God
          - roleId: usr
            roleName: user
            roleDescription: BFU
      properties:
        data:
          $ref: '#/components/schemas/user'
      required:
      - data
      type: object
    runCheckForPasswordStrength_request:
      additionalProperties: false
      properties:
        password:
          type: string
      required:
      - password
      type: object
    runCheckForPasswordStrength_200_response_data_feedback:
      additionalProperties: false
      example:
        warning: warning
        suggestions:
        - suggestions
        - suggestions
      properties:
        warning:
          type: string
        suggestions:
          items:
            type: string
          type: array
      required:
      - suggestions
      - warning
      type: object
    runCheckForPasswordStrength_200_response_data:
      additionalProperties: false
      example:
        feedback:
          warning: warning
          suggestions:
          - suggestions
          - suggestions
        score: 0.8008281904610115
      properties:
        score:
          type: number
        feedback:
          $ref: '#/components/schemas/runCheckForPasswordStrength_200_response_data_feedback'
      required:
      - feedback
      - score
      type: object
    runCheckForPasswordStrength_200_response:
      additionalProperties: false
      example:
        data:
          feedback:
            warning: warning
            suggestions:
            - suggestions
            - suggestions
          score: 0.8008281904610115
      properties:
        data:
          $ref: '#/components/schemas/runCheckForPasswordStrength_200_response_data'
      required:
      - data
      type: object
    getSubscriptionById_200_response:
      additionalProperties: true
      example:
        code: test-code
        organizationName: biganimal-edb-sports-inc
        description: this is for EDB sports inc
        id: dd902cae-727d-42b8-ac4a-691f72afc49f
        sfId: sfid_abcedfg_2e3f0abc
        domainNames:
        - edbpostgres.com
        - edbpostgres.com
        status: SUBSCR_PENDING_FULFILLMENT
      properties:
        id:
          example: dd902cae-727d-42b8-ac4a-691f72afc49f
          type: string
        sfId:
          example: sfid_abcedfg_2e3f0abc
          type: string
        organizationName:
          example: biganimal-edb-sports-inc
          type: string
        code:
          example: test-code
          type: string
        domainNames:
          items:
            example: edbpostgres.com
            type: string
          type: array
        description:
          example: this is for EDB sports inc
          type: string
        status:
          enum:
          - SUBSCR_UNKNOWN
          - SUBSCR_PENDING_FULFILLMENT
          - SUBSCR_SUBSCRIBED
          - SUBSCR_SUSPEND
          - SUBSCR_UNSUBSCRIBED
          example: SUBSCR_PENDING_FULFILLMENT
          type: string
      type: object
    getConnectionList_200_response_brokerConnOptions_saml:
      additionalProperties: false
      example:
        protocolBinding: HTTP-POST
        signingCert: asdasdasdasdasdasd
        signatureAlgorithm: rsa-sha256
        signInEndpoint: https://auth.enterprisedb.network/...
      properties:
        signInEndpoint:
          example: https://auth.enterprisedb.network/...
          type: string
        protocolBinding:
          example: HTTP-POST
          type: string
        signatureAlgorithm:
          example: rsa-sha256
          type: string
        signingCert:
          example: asdasdasdasdasdasd
          type: string
      type: object
    getConnectionList_200_response_brokerConnOptions_oidc:
      additionalProperties: false
      example:
        clientId: randomstring
        clientSecret: randomstring
        discoveryUrl: https://auth.enterprisedb.network/...
      properties:
        clientId:
          example: randomstring
          type: string
        clientSecret:
          example: randomstring
          type: string
        discoveryUrl:
          example: https://auth.enterprisedb.network/...
          type: string
      type: object
    getConnectionList_200_response_brokerConnOptions:
      additionalProperties: false
      example:
        saml:
          protocolBinding: HTTP-POST
          signingCert: asdasdasdasdasdasd
          signatureAlgorithm: rsa-sha256
          signInEndpoint: https://auth.enterprisedb.network/...
        oidc:
          clientId: randomstring
          clientSecret: randomstring
          discoveryUrl: https://auth.enterprisedb.network/...
      properties:
        saml:
          $ref: '#/components/schemas/getConnectionList_200_response_brokerConnOptions_saml'
        oidc:
          $ref: '#/components/schemas/getConnectionList_200_response_brokerConnOptions_oidc'
      type: object
    getConnectionList_200_response_brokerConfigInfo_saml:
      example:
        acsUrl: https://auth.enterprisedb.network/login/callback?connection=org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
        audienceUri: urn:auth0:dev-ixch-9cv:org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
      properties:
        acsUrl:
          example: https://auth.enterprisedb.network/login/callback?connection=org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
          type: string
        audienceUri:
          example: urn:auth0:dev-ixch-9cv:org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
          type: string
      type: object
    getConnectionList_200_response_brokerConfigInfo_oidc:
      example:
        callbackUrl: https://auth.enterprisedb.network/login/callback
      properties:
        callbackUrl:
          example: https://auth.enterprisedb.network/login/callback
          type: string
      type: object
    getConnectionList_200_response_brokerConfigInfo:
      example:
        saml:
          acsUrl: https://auth.enterprisedb.network/login/callback?connection=org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
          audienceUri: urn:auth0:dev-ixch-9cv:org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
        oidc:
          callbackUrl: https://auth.enterprisedb.network/login/callback
      properties:
        saml:
          $ref: '#/components/schemas/getConnectionList_200_response_brokerConfigInfo_saml'
        oidc:
          $ref: '#/components/schemas/getConnectionList_200_response_brokerConfigInfo_oidc'
      type: object
    getConnectionList_200_response:
      additionalProperties: true
      example:
        brokerConnOptions:
          saml:
            protocolBinding: HTTP-POST
            signingCert: asdasdasdasdasdasd
            signatureAlgorithm: rsa-sha256
            signInEndpoint: https://auth.enterprisedb.network/...
          oidc:
            clientId: randomstring
            clientSecret: randomstring
            discoveryUrl: https://auth.enterprisedb.network/...
        validated: true
        brokerConnectionId: test-broker-connection-id
        id: 1350f202-9501-4ba8-8f54-f4230020899e
        subscriptionId: cb07adba-dbcd-453f-a562-88f9ff7e4398
        strategy: GENERIC_SAML
        brokerConfigInfo:
          saml:
            acsUrl: https://auth.enterprisedb.network/login/callback?connection=org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
            audienceUri: urn:auth0:dev-ixch-9cv:org-yte8YapvsdeUgkod-7493de60-5d9f-41e5-8dcf-c863785266a5-nGB4n6FM
          oidc:
            callbackUrl: https://auth.enterprisedb.network/login/callback
        brokerConnectionName: test-broker-connection-name
      properties:
        id:
          example: 1350f202-9501-4ba8-8f54-f4230020899e
          type: string
        subscriptionId:
          example: cb07adba-dbcd-453f-a562-88f9ff7e4398
          type: string
        brokerConnectionId:
          example: test-broker-connection-id
          type: string
        brokerConnectionName:
          example: test-broker-connection-name
          type: string
        strategy:
          enum:
          - UNKNOWN_STRATEGY
          - GENERIC_OIDC
          - GENERIC_SAML
          - WAAD_OIDC
          example: GENERIC_SAML
          type: string
        brokerConnOptions:
          $ref: '#/components/schemas/getConnectionList_200_response_brokerConnOptions'
        brokerConfigInfo:
          $ref: '#/components/schemas/getConnectionList_200_response_brokerConfigInfo'
        validated:
          example: true
          type: boolean
      type: object
    getUserInfo_200_response:
      additionalProperties: false
      example:
        data:
          organizationId: org_brCxzr08qr7RBEi1
          organizationType: DBMgtaaS
          aadUpn: pramod.ahire@edbpostgres.com
          name: pramod ahire
          organizationTier: azuremp-normal
          userId: waad|5rAIS1R5pW9m5KZvzG059Vw_CFK7GpSKOfGLr-BvuGo
          email: pramod.ahire@edbpostgres.com
      properties:
        data:
          $ref: '#/components/schemas/userInfo'
      required:
      - data
      type: object
    clusterEstate_clusterRegions_inner:
      properties:
        regionId:
          type: string
        regionName:
          type: string
        clusterCount:
          type: number
      required:
      - clusterCount
      - regionId
      - regionName
      type: object
    _400_error_errors_inner:
      additionalProperties: false
      properties:
        path:
          type: string
        message:
          type: string
        errorCode:
          type: string
        details:
          items:
            additionalProperties: true
            type: object
          type: array
      type: object
    _400_error:
      additionalProperties: false
      properties:
        status:
          type: number
        message:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/_400_error_errors_inner'
          type: array
        reference:
          type: string
        source:
          type: string
      required:
      - message
      - reference
      - status
      type: object
    _401_error_errors_inner:
      additionalProperties: false
      properties:
        path:
          type: string
        message:
          type: string
        errorCode:
          type: string
      type: object
    _401_error:
      additionalProperties: false
      properties:
        status:
          type: number
        message:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/_401_error_errors_inner'
          type: array
        reference:
          type: string
        source:
          type: string
      required:
      - message
      - reference
      - status
      type: object
    trialUsage_cloudProviderUsages_inner_clusterUsages_inner:
      properties:
        orgId:
          type: string
        cloudProviderId:
          type: string
        clusterId:
          type: string
        expireAt:
          $ref: '#/components/schemas/pointInTime'
      type: object
    trialUsage_cloudProviderUsages_inner:
      properties:
        orgId:
          type: string
        cloudProviderId:
          type: string
        cloudProviderName:
          type: string
        expireAt:
          $ref: '#/components/schemas/pointInTime'
        clusterUsages:
          items:
            $ref: '#/components/schemas/trialUsage_cloudProviderUsages_inner_clusterUsages_inner'
          type: array
      type: object
    clusterDetail_clusterArchitecture:
      properties:
        clusterArchitectureId:
          type: string
        clusterArchitectureName:
          type: string
        nodes:
          type: number
      required:
      - clusterArchitectureId
      - clusterArchitectureName
      - nodes
      type: object
    clusterDetail_pgConfig_inner:
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    clusterDetail_conditions_inner:
      additionalProperties: false
      properties:
        conditionStatus:
          type: string
        lastTransitionTime:
          $ref: '#/components/schemas/pointInTime'
        reason:
          type: string
        message:
          type: string
        type:
          type: string
      type: object
    clusterDetail_storage:
      properties:
        volumePropertiesId:
          type: string
        volumeTypeId:
          type: string
        iops:
          type: string
        size:
          type: string
        throughput:
          type: string
      required:
      - iops
      - size
      - throughput
      - volumePropertiesId
      - volumeTypeId
      type: object
    createCluster_pgType:
      additionalProperties: false
      properties:
        pgTypeId:
          type: string
      required:
      - pgTypeId
      type: object
    createCluster_pgVersion:
      additionalProperties: false
      properties:
        pgVersionId:
          type: string
      required:
      - pgVersionId
      type: object
    createCluster_provider:
      additionalProperties: false
      properties:
        cloudProviderId:
          type: string
      required:
      - cloudProviderId
      type: object
    createCluster_instanceType:
      additionalProperties: false
      properties:
        instanceTypeId:
          type: string
      required:
      - instanceTypeId
      type: object
    createCluster_storage:
      additionalProperties: false
      properties:
        volumePropertiesId:
          type: string
        volumeTypeId:
          type: string
        iops:
          type: string
        size:
          type: string
        throughput:
          description: Unused
          type: string
      required:
      - volumePropertiesId
      - volumeTypeId
      type: object
    createCluster_clusterArchitecture:
      additionalProperties: false
      properties:
        clusterArchitectureId:
          type: string
        nodes:
          maximum: 5
          minimum: 1
          type: number
        params:
          items:
            $ref: '#/components/schemas/clusterDetail_pgConfig_inner'
          type: array
      required:
      - clusterArchitectureId
      - nodes
      type: object
    patchCluster_storage:
      additionalProperties: false
      properties:
        volumePropertiesId:
          type: string
        volumeTypeId:
          type: string
        iops:
          type: string
        size:
          type: string
        throughput:
          description: Unused
          type: string
      type: object
    clusterPgConfigParameter_allOf:
      properties:
        currentValue:
          type: string
      type: object
    event_action:
      additionalProperties: false
      properties:
        type:
          type: number
        transform:
          type: string
      type: object
    event_resource:
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    usage_totals:
      properties:
        clusters:
          type: number
        vcpuHours:
          type: number
      required:
      - clusters
      - vcpuHours
      type: object
    connections_brokerConnOptions_saml:
      additionalProperties: false
      properties:
        protocolBinding:
          type: string
        signInEndpoint:
          type: string
        signatureAlgorithm:
          type: string
        signingCert:
          type: string
      type: object
    connections_brokerConnOptions_oidc:
      additionalProperties: false
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        discoveryUrl:
          type: string
      type: object
    connections_brokerConnOptions:
      additionalProperties: false
      properties:
        saml:
          $ref: '#/components/schemas/connections_brokerConnOptions_saml'
        oidc:
          $ref: '#/components/schemas/connections_brokerConnOptions_oidc'
      type: object
    clusterUsage_pgType:
      properties:
        pgTypeId:
          type: string
        pgTypeName:
          type: string
      required:
      - pgTypeId
      - pgTypeName
      type: object
    clusterUsage_cloudProvider:
      properties:
        cloudProviderId:
          type: string
        cloudProviderName:
          type: string
      required:
      - cloudProviderId
      - cloudProviderName
      type: object
    clusterUsage_clusterArchitecture:
      properties:
        clusterArchitectureId:
          type: string
        clusterArchitectureName:
          type: string
      type: object
