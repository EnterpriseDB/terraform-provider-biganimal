/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PgType struct for PgType
type PgType struct {
	PgTypeId string `json:"pgTypeId"`
	PgTypeName string `json:"pgTypeName"`
	SupportedClusterArchitectureIds []string `json:"supportedClusterArchitectureIds,omitempty"`
}

// NewPgType instantiates a new PgType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPgType(pgTypeId string, pgTypeName string) *PgType {
	this := PgType{}
	this.PgTypeId = pgTypeId
	this.PgTypeName = pgTypeName
	return &this
}

// NewPgTypeWithDefaults instantiates a new PgType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPgTypeWithDefaults() *PgType {
	this := PgType{}
	return &this
}

// GetPgTypeId returns the PgTypeId field value
func (o *PgType) GetPgTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PgTypeId
}

// GetPgTypeIdOk returns a tuple with the PgTypeId field value
// and a boolean to check if the value has been set.
func (o *PgType) GetPgTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PgTypeId, true
}

// SetPgTypeId sets field value
func (o *PgType) SetPgTypeId(v string) {
	o.PgTypeId = v
}

// GetPgTypeName returns the PgTypeName field value
func (o *PgType) GetPgTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PgTypeName
}

// GetPgTypeNameOk returns a tuple with the PgTypeName field value
// and a boolean to check if the value has been set.
func (o *PgType) GetPgTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PgTypeName, true
}

// SetPgTypeName sets field value
func (o *PgType) SetPgTypeName(v string) {
	o.PgTypeName = v
}

// GetSupportedClusterArchitectureIds returns the SupportedClusterArchitectureIds field value if set, zero value otherwise.
func (o *PgType) GetSupportedClusterArchitectureIds() []string {
	if o == nil || o.SupportedClusterArchitectureIds == nil {
		var ret []string
		return ret
	}
	return o.SupportedClusterArchitectureIds
}

// GetSupportedClusterArchitectureIdsOk returns a tuple with the SupportedClusterArchitectureIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PgType) GetSupportedClusterArchitectureIdsOk() ([]string, bool) {
	if o == nil || o.SupportedClusterArchitectureIds == nil {
		return nil, false
	}
	return o.SupportedClusterArchitectureIds, true
}

// HasSupportedClusterArchitectureIds returns a boolean if a field has been set.
func (o *PgType) HasSupportedClusterArchitectureIds() bool {
	if o != nil && o.SupportedClusterArchitectureIds != nil {
		return true
	}

	return false
}

// SetSupportedClusterArchitectureIds gets a reference to the given []string and assigns it to the SupportedClusterArchitectureIds field.
func (o *PgType) SetSupportedClusterArchitectureIds(v []string) {
	o.SupportedClusterArchitectureIds = v
}

func (o PgType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pgTypeId"] = o.PgTypeId
	}
	if true {
		toSerialize["pgTypeName"] = o.PgTypeName
	}
	if o.SupportedClusterArchitectureIds != nil {
		toSerialize["supportedClusterArchitectureIds"] = o.SupportedClusterArchitectureIds
	}
	return json.Marshal(toSerialize)
}

type NullablePgType struct {
	value *PgType
	isSet bool
}

func (v NullablePgType) Get() *PgType {
	return v.value
}

func (v *NullablePgType) Set(val *PgType) {
	v.value = val
	v.isSet = true
}

func (v NullablePgType) IsSet() bool {
	return v.isSet
}

func (v *NullablePgType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePgType(val *PgType) *NullablePgType {
	return &NullablePgType{value: val, isSet: true}
}

func (v NullablePgType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePgType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


