/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventAction struct for EventAction
type EventAction struct {
	Type *float32 `json:"type,omitempty"`
	Transform *string `json:"transform,omitempty"`
}

// NewEventAction instantiates a new EventAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAction() *EventAction {
	this := EventAction{}
	return &this
}

// NewEventActionWithDefaults instantiates a new EventAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventActionWithDefaults() *EventAction {
	this := EventAction{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventAction) GetType() float32 {
	if o == nil || o.Type == nil {
		var ret float32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAction) GetTypeOk() (*float32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventAction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given float32 and assigns it to the Type field.
func (o *EventAction) SetType(v float32) {
	o.Type = &v
}

// GetTransform returns the Transform field value if set, zero value otherwise.
func (o *EventAction) GetTransform() string {
	if o == nil || o.Transform == nil {
		var ret string
		return ret
	}
	return *o.Transform
}

// GetTransformOk returns a tuple with the Transform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAction) GetTransformOk() (*string, bool) {
	if o == nil || o.Transform == nil {
		return nil, false
	}
	return o.Transform, true
}

// HasTransform returns a boolean if a field has been set.
func (o *EventAction) HasTransform() bool {
	if o != nil && o.Transform != nil {
		return true
	}

	return false
}

// SetTransform gets a reference to the given string and assigns it to the Transform field.
func (o *EventAction) SetTransform(v string) {
	o.Transform = &v
}

func (o EventAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Transform != nil {
		toSerialize["transform"] = o.Transform
	}
	return json.Marshal(toSerialize)
}

type NullableEventAction struct {
	value *EventAction
	isSet bool
}

func (v NullableEventAction) Get() *EventAction {
	return v.value
}

func (v *NullableEventAction) Set(val *EventAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAction(val *EventAction) *NullableEventAction {
	return &NullableEventAction{value: val, isSet: true}
}

func (v NullableEventAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


