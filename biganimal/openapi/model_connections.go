/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Connections struct for Connections
type Connections struct {
	ConnectionId string `json:"connectionId"`
	Strategy string `json:"strategy"`
	BrokerConnOptions ConnectionsBrokerConnOptions `json:"brokerConnOptions"`
}

// NewConnections instantiates a new Connections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnections(connectionId string, strategy string, brokerConnOptions ConnectionsBrokerConnOptions) *Connections {
	this := Connections{}
	this.ConnectionId = connectionId
	this.Strategy = strategy
	this.BrokerConnOptions = brokerConnOptions
	return &this
}

// NewConnectionsWithDefaults instantiates a new Connections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionsWithDefaults() *Connections {
	this := Connections{}
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *Connections) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *Connections) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *Connections) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetStrategy returns the Strategy field value
func (o *Connections) GetStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *Connections) GetStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *Connections) SetStrategy(v string) {
	o.Strategy = v
}

// GetBrokerConnOptions returns the BrokerConnOptions field value
func (o *Connections) GetBrokerConnOptions() ConnectionsBrokerConnOptions {
	if o == nil {
		var ret ConnectionsBrokerConnOptions
		return ret
	}

	return o.BrokerConnOptions
}

// GetBrokerConnOptionsOk returns a tuple with the BrokerConnOptions field value
// and a boolean to check if the value has been set.
func (o *Connections) GetBrokerConnOptionsOk() (*ConnectionsBrokerConnOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrokerConnOptions, true
}

// SetBrokerConnOptions sets field value
func (o *Connections) SetBrokerConnOptions(v ConnectionsBrokerConnOptions) {
	o.BrokerConnOptions = v
}

func (o Connections) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connectionId"] = o.ConnectionId
	}
	if true {
		toSerialize["strategy"] = o.Strategy
	}
	if true {
		toSerialize["brokerConnOptions"] = o.BrokerConnOptions
	}
	return json.Marshal(toSerialize)
}

type NullableConnections struct {
	value *Connections
	isSet bool
}

func (v NullableConnections) Get() *Connections {
	return v.value
}

func (v *NullableConnections) Set(val *Connections) {
	v.value = val
	v.isSet = true
}

func (v NullableConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnections(val *Connections) *NullableConnections {
	return &NullableConnections{value: val, isSet: true}
}

func (v NullableConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


