/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserInfo struct for UserInfo
type UserInfo struct {
	Name *string `json:"name,omitempty"`
	UserId *string `json:"userId,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	AadUpn *string `json:"aadUpn,omitempty"`
	Email *string `json:"email,omitempty"`
	OrganizationType *string `json:"organizationType,omitempty"`
	OrganizationTier *string `json:"organizationTier,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserInfo UserInfo

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo() *UserInfo {
	this := UserInfo{}
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserInfo) SetName(v string) {
	o.Name = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserInfo) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserInfo) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *UserInfo) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetOrganizationIdOk() (*string, bool) {
	if o == nil || o.OrganizationId == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *UserInfo) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *UserInfo) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetAadUpn returns the AadUpn field value if set, zero value otherwise.
func (o *UserInfo) GetAadUpn() string {
	if o == nil || o.AadUpn == nil {
		var ret string
		return ret
	}
	return *o.AadUpn
}

// GetAadUpnOk returns a tuple with the AadUpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetAadUpnOk() (*string, bool) {
	if o == nil || o.AadUpn == nil {
		return nil, false
	}
	return o.AadUpn, true
}

// HasAadUpn returns a boolean if a field has been set.
func (o *UserInfo) HasAadUpn() bool {
	if o != nil && o.AadUpn != nil {
		return true
	}

	return false
}

// SetAadUpn gets a reference to the given string and assigns it to the AadUpn field.
func (o *UserInfo) SetAadUpn(v string) {
	o.AadUpn = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserInfo) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserInfo) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetOrganizationType returns the OrganizationType field value if set, zero value otherwise.
func (o *UserInfo) GetOrganizationType() string {
	if o == nil || o.OrganizationType == nil {
		var ret string
		return ret
	}
	return *o.OrganizationType
}

// GetOrganizationTypeOk returns a tuple with the OrganizationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetOrganizationTypeOk() (*string, bool) {
	if o == nil || o.OrganizationType == nil {
		return nil, false
	}
	return o.OrganizationType, true
}

// HasOrganizationType returns a boolean if a field has been set.
func (o *UserInfo) HasOrganizationType() bool {
	if o != nil && o.OrganizationType != nil {
		return true
	}

	return false
}

// SetOrganizationType gets a reference to the given string and assigns it to the OrganizationType field.
func (o *UserInfo) SetOrganizationType(v string) {
	o.OrganizationType = &v
}

// GetOrganizationTier returns the OrganizationTier field value if set, zero value otherwise.
func (o *UserInfo) GetOrganizationTier() string {
	if o == nil || o.OrganizationTier == nil {
		var ret string
		return ret
	}
	return *o.OrganizationTier
}

// GetOrganizationTierOk returns a tuple with the OrganizationTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetOrganizationTierOk() (*string, bool) {
	if o == nil || o.OrganizationTier == nil {
		return nil, false
	}
	return o.OrganizationTier, true
}

// HasOrganizationTier returns a boolean if a field has been set.
func (o *UserInfo) HasOrganizationTier() bool {
	if o != nil && o.OrganizationTier != nil {
		return true
	}

	return false
}

// SetOrganizationTier gets a reference to the given string and assigns it to the OrganizationTier field.
func (o *UserInfo) SetOrganizationTier(v string) {
	o.OrganizationTier = &v
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.OrganizationId != nil {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if o.AadUpn != nil {
		toSerialize["aadUpn"] = o.AadUpn
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.OrganizationType != nil {
		toSerialize["organizationType"] = o.OrganizationType
	}
	if o.OrganizationTier != nil {
		toSerialize["organizationTier"] = o.OrganizationTier
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserInfo) UnmarshalJSON(bytes []byte) (err error) {
	varUserInfo := _UserInfo{}

	if err = json.Unmarshal(bytes, &varUserInfo); err == nil {
		*o = UserInfo(varUserInfo)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "organizationId")
		delete(additionalProperties, "aadUpn")
		delete(additionalProperties, "email")
		delete(additionalProperties, "organizationType")
		delete(additionalProperties, "organizationTier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


