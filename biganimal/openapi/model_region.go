/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Region struct for Region
type Region struct {
	CloudProviderId string `json:"cloudProviderId"`
	CloudProviderName string `json:"cloudProviderName"`
	ClusterCount float32 `json:"clusterCount"`
	Continent string `json:"continent"`
	RegionId string `json:"regionId"`
	RegionName string `json:"regionName"`
	Status string `json:"status"`
}

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(cloudProviderId string, cloudProviderName string, clusterCount float32, continent string, regionId string, regionName string, status string) *Region {
	this := Region{}
	this.CloudProviderId = cloudProviderId
	this.CloudProviderName = cloudProviderName
	this.ClusterCount = clusterCount
	this.Continent = continent
	this.RegionId = regionId
	this.RegionName = regionName
	this.Status = status
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	return &this
}

// GetCloudProviderId returns the CloudProviderId field value
func (o *Region) GetCloudProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderId
}

// GetCloudProviderIdOk returns a tuple with the CloudProviderId field value
// and a boolean to check if the value has been set.
func (o *Region) GetCloudProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderId, true
}

// SetCloudProviderId sets field value
func (o *Region) SetCloudProviderId(v string) {
	o.CloudProviderId = v
}

// GetCloudProviderName returns the CloudProviderName field value
func (o *Region) GetCloudProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderName
}

// GetCloudProviderNameOk returns a tuple with the CloudProviderName field value
// and a boolean to check if the value has been set.
func (o *Region) GetCloudProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderName, true
}

// SetCloudProviderName sets field value
func (o *Region) SetCloudProviderName(v string) {
	o.CloudProviderName = v
}

// GetClusterCount returns the ClusterCount field value
func (o *Region) GetClusterCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ClusterCount
}

// GetClusterCountOk returns a tuple with the ClusterCount field value
// and a boolean to check if the value has been set.
func (o *Region) GetClusterCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterCount, true
}

// SetClusterCount sets field value
func (o *Region) SetClusterCount(v float32) {
	o.ClusterCount = v
}

// GetContinent returns the Continent field value
func (o *Region) GetContinent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Continent
}

// GetContinentOk returns a tuple with the Continent field value
// and a boolean to check if the value has been set.
func (o *Region) GetContinentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Continent, true
}

// SetContinent sets field value
func (o *Region) SetContinent(v string) {
	o.Continent = v
}

// GetRegionId returns the RegionId field value
func (o *Region) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *Region) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *Region) SetRegionId(v string) {
	o.RegionId = v
}

// GetRegionName returns the RegionName field value
func (o *Region) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *Region) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *Region) SetRegionName(v string) {
	o.RegionName = v
}

// GetStatus returns the Status field value
func (o *Region) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Region) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Region) SetStatus(v string) {
	o.Status = v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cloudProviderId"] = o.CloudProviderId
	}
	if true {
		toSerialize["cloudProviderName"] = o.CloudProviderName
	}
	if true {
		toSerialize["clusterCount"] = o.ClusterCount
	}
	if true {
		toSerialize["continent"] = o.Continent
	}
	if true {
		toSerialize["regionId"] = o.RegionId
	}
	if true {
		toSerialize["regionName"] = o.RegionName
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


