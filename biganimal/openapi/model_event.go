/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Event struct for Event
type Event struct {
	Action *EventAction `json:"action,omitempty"`
	User *RunSearchForEventsRequestUser `json:"user,omitempty"`
	Resource *EventResource `json:"resource,omitempty"`
	IpAddress string `json:"ipAddress"`
	SessionId string `json:"sessionId"`
	CreatedAt *PointInTime `json:"createdAt,omitempty"`
}

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(ipAddress string, sessionId string) *Event {
	this := Event{}
	this.IpAddress = ipAddress
	this.SessionId = sessionId
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Event) GetAction() EventAction {
	if o == nil || o.Action == nil {
		var ret EventAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetActionOk() (*EventAction, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Event) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given EventAction and assigns it to the Action field.
func (o *Event) SetAction(v EventAction) {
	o.Action = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Event) GetUser() RunSearchForEventsRequestUser {
	if o == nil || o.User == nil {
		var ret RunSearchForEventsRequestUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetUserOk() (*RunSearchForEventsRequestUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Event) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given RunSearchForEventsRequestUser and assigns it to the User field.
func (o *Event) SetUser(v RunSearchForEventsRequestUser) {
	o.User = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Event) GetResource() EventResource {
	if o == nil || o.Resource == nil {
		var ret EventResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetResourceOk() (*EventResource, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Event) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given EventResource and assigns it to the Resource field.
func (o *Event) SetResource(v EventResource) {
	o.Resource = &v
}

// GetIpAddress returns the IpAddress field value
func (o *Event) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *Event) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *Event) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetSessionId returns the SessionId field value
func (o *Event) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *Event) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *Event) SetSessionId(v string) {
	o.SessionId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Event) GetCreatedAt() PointInTime {
	if o == nil || o.CreatedAt == nil {
		var ret PointInTime
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetCreatedAtOk() (*PointInTime, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Event) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given PointInTime and assigns it to the CreatedAt field.
func (o *Event) SetCreatedAt(v PointInTime) {
	o.CreatedAt = &v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if true {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if true {
		toSerialize["sessionId"] = o.SessionId
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


