/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateClusterStorage struct for CreateClusterStorage
type CreateClusterStorage struct {
	VolumePropertiesId string `json:"volumePropertiesId"`
	VolumeTypeId string `json:"volumeTypeId"`
	Iops *string `json:"iops,omitempty"`
	Size *string `json:"size,omitempty"`
	// Unused
	Throughput *string `json:"throughput,omitempty"`
}

// NewCreateClusterStorage instantiates a new CreateClusterStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateClusterStorage(volumePropertiesId string, volumeTypeId string) *CreateClusterStorage {
	this := CreateClusterStorage{}
	this.VolumePropertiesId = volumePropertiesId
	this.VolumeTypeId = volumeTypeId
	return &this
}

// NewCreateClusterStorageWithDefaults instantiates a new CreateClusterStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClusterStorageWithDefaults() *CreateClusterStorage {
	this := CreateClusterStorage{}
	return &this
}

// GetVolumePropertiesId returns the VolumePropertiesId field value
func (o *CreateClusterStorage) GetVolumePropertiesId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumePropertiesId
}

// GetVolumePropertiesIdOk returns a tuple with the VolumePropertiesId field value
// and a boolean to check if the value has been set.
func (o *CreateClusterStorage) GetVolumePropertiesIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumePropertiesId, true
}

// SetVolumePropertiesId sets field value
func (o *CreateClusterStorage) SetVolumePropertiesId(v string) {
	o.VolumePropertiesId = v
}

// GetVolumeTypeId returns the VolumeTypeId field value
func (o *CreateClusterStorage) GetVolumeTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeTypeId
}

// GetVolumeTypeIdOk returns a tuple with the VolumeTypeId field value
// and a boolean to check if the value has been set.
func (o *CreateClusterStorage) GetVolumeTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeTypeId, true
}

// SetVolumeTypeId sets field value
func (o *CreateClusterStorage) SetVolumeTypeId(v string) {
	o.VolumeTypeId = v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *CreateClusterStorage) GetIops() string {
	if o == nil || o.Iops == nil {
		var ret string
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterStorage) GetIopsOk() (*string, bool) {
	if o == nil || o.Iops == nil {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *CreateClusterStorage) HasIops() bool {
	if o != nil && o.Iops != nil {
		return true
	}

	return false
}

// SetIops gets a reference to the given string and assigns it to the Iops field.
func (o *CreateClusterStorage) SetIops(v string) {
	o.Iops = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CreateClusterStorage) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterStorage) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CreateClusterStorage) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *CreateClusterStorage) SetSize(v string) {
	o.Size = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *CreateClusterStorage) GetThroughput() string {
	if o == nil || o.Throughput == nil {
		var ret string
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterStorage) GetThroughputOk() (*string, bool) {
	if o == nil || o.Throughput == nil {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *CreateClusterStorage) HasThroughput() bool {
	if o != nil && o.Throughput != nil {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given string and assigns it to the Throughput field.
func (o *CreateClusterStorage) SetThroughput(v string) {
	o.Throughput = &v
}

func (o CreateClusterStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["volumePropertiesId"] = o.VolumePropertiesId
	}
	if true {
		toSerialize["volumeTypeId"] = o.VolumeTypeId
	}
	if o.Iops != nil {
		toSerialize["iops"] = o.Iops
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Throughput != nil {
		toSerialize["throughput"] = o.Throughput
	}
	return json.Marshal(toSerialize)
}

type NullableCreateClusterStorage struct {
	value *CreateClusterStorage
	isSet bool
}

func (v NullableCreateClusterStorage) Get() *CreateClusterStorage {
	return v.value
}

func (v *NullableCreateClusterStorage) Set(val *CreateClusterStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateClusterStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateClusterStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateClusterStorage(val *CreateClusterStorage) *NullableCreateClusterStorage {
	return &NullableCreateClusterStorage{value: val, isSet: true}
}

func (v NullableCreateClusterStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateClusterStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


