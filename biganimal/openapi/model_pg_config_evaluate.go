/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PgConfigEvaluate struct for PgConfigEvaluate
type PgConfigEvaluate struct {
	Name string `json:"name"`
	Value string `json:"value"`
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _PgConfigEvaluate PgConfigEvaluate

// NewPgConfigEvaluate instantiates a new PgConfigEvaluate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPgConfigEvaluate(name string, value string, status string) *PgConfigEvaluate {
	this := PgConfigEvaluate{}
	this.Name = name
	this.Value = value
	this.Status = status
	return &this
}

// NewPgConfigEvaluateWithDefaults instantiates a new PgConfigEvaluate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPgConfigEvaluateWithDefaults() *PgConfigEvaluate {
	this := PgConfigEvaluate{}
	return &this
}

// GetName returns the Name field value
func (o *PgConfigEvaluate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PgConfigEvaluate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PgConfigEvaluate) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *PgConfigEvaluate) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PgConfigEvaluate) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PgConfigEvaluate) SetValue(v string) {
	o.Value = v
}

// GetStatus returns the Status field value
func (o *PgConfigEvaluate) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PgConfigEvaluate) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PgConfigEvaluate) SetStatus(v string) {
	o.Status = v
}

func (o PgConfigEvaluate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PgConfigEvaluate) UnmarshalJSON(bytes []byte) (err error) {
	varPgConfigEvaluate := _PgConfigEvaluate{}

	if err = json.Unmarshal(bytes, &varPgConfigEvaluate); err == nil {
		*o = PgConfigEvaluate(varPgConfigEvaluate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePgConfigEvaluate struct {
	value *PgConfigEvaluate
	isSet bool
}

func (v NullablePgConfigEvaluate) Get() *PgConfigEvaluate {
	return v.value
}

func (v *NullablePgConfigEvaluate) Set(val *PgConfigEvaluate) {
	v.value = val
	v.isSet = true
}

func (v NullablePgConfigEvaluate) IsSet() bool {
	return v.isSet
}

func (v *NullablePgConfigEvaluate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePgConfigEvaluate(val *PgConfigEvaluate) *NullablePgConfigEvaluate {
	return &NullablePgConfigEvaluate{value: val, isSet: true}
}

func (v NullablePgConfigEvaluate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePgConfigEvaluate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


