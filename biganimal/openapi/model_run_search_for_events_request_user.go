/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RunSearchForEventsRequestUser struct for RunSearchForEventsRequestUser
type RunSearchForEventsRequestUser struct {
	Name *string `json:"name,omitempty"`
	Role *string `json:"role,omitempty"`
	Group *string `json:"group,omitempty"`
}

// NewRunSearchForEventsRequestUser instantiates a new RunSearchForEventsRequestUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunSearchForEventsRequestUser() *RunSearchForEventsRequestUser {
	this := RunSearchForEventsRequestUser{}
	return &this
}

// NewRunSearchForEventsRequestUserWithDefaults instantiates a new RunSearchForEventsRequestUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunSearchForEventsRequestUserWithDefaults() *RunSearchForEventsRequestUser {
	this := RunSearchForEventsRequestUser{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RunSearchForEventsRequestUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSearchForEventsRequestUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RunSearchForEventsRequestUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RunSearchForEventsRequestUser) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RunSearchForEventsRequestUser) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSearchForEventsRequestUser) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RunSearchForEventsRequestUser) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RunSearchForEventsRequestUser) SetRole(v string) {
	o.Role = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RunSearchForEventsRequestUser) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSearchForEventsRequestUser) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RunSearchForEventsRequestUser) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *RunSearchForEventsRequestUser) SetGroup(v string) {
	o.Group = &v
}

func (o RunSearchForEventsRequestUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	return json.Marshal(toSerialize)
}

type NullableRunSearchForEventsRequestUser struct {
	value *RunSearchForEventsRequestUser
	isSet bool
}

func (v NullableRunSearchForEventsRequestUser) Get() *RunSearchForEventsRequestUser {
	return v.value
}

func (v *NullableRunSearchForEventsRequestUser) Set(val *RunSearchForEventsRequestUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRunSearchForEventsRequestUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRunSearchForEventsRequestUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunSearchForEventsRequestUser(val *RunSearchForEventsRequestUser) *NullableRunSearchForEventsRequestUser {
	return &NullableRunSearchForEventsRequestUser{value: val, isSet: true}
}

func (v NullableRunSearchForEventsRequestUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunSearchForEventsRequestUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


