/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsageTotals struct for UsageTotals
type UsageTotals struct {
	Clusters float32 `json:"clusters"`
	VcpuHours float32 `json:"vcpuHours"`
}

// NewUsageTotals instantiates a new UsageTotals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageTotals(clusters float32, vcpuHours float32) *UsageTotals {
	this := UsageTotals{}
	this.Clusters = clusters
	this.VcpuHours = vcpuHours
	return &this
}

// NewUsageTotalsWithDefaults instantiates a new UsageTotals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageTotalsWithDefaults() *UsageTotals {
	this := UsageTotals{}
	return &this
}

// GetClusters returns the Clusters field value
func (o *UsageTotals) GetClusters() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value
// and a boolean to check if the value has been set.
func (o *UsageTotals) GetClustersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Clusters, true
}

// SetClusters sets field value
func (o *UsageTotals) SetClusters(v float32) {
	o.Clusters = v
}

// GetVcpuHours returns the VcpuHours field value
func (o *UsageTotals) GetVcpuHours() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VcpuHours
}

// GetVcpuHoursOk returns a tuple with the VcpuHours field value
// and a boolean to check if the value has been set.
func (o *UsageTotals) GetVcpuHoursOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VcpuHours, true
}

// SetVcpuHours sets field value
func (o *UsageTotals) SetVcpuHours(v float32) {
	o.VcpuHours = v
}

func (o UsageTotals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusters"] = o.Clusters
	}
	if true {
		toSerialize["vcpuHours"] = o.VcpuHours
	}
	return json.Marshal(toSerialize)
}

type NullableUsageTotals struct {
	value *UsageTotals
	isSet bool
}

func (v NullableUsageTotals) Get() *UsageTotals {
	return v.value
}

func (v *NullableUsageTotals) Set(val *UsageTotals) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageTotals) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageTotals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageTotals(val *UsageTotals) *NullableUsageTotals {
	return &NullableUsageTotals{value: val, isSet: true}
}

func (v NullableUsageTotals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageTotals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


