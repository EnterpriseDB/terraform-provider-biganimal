/*
BigAnimal

BigAnimal REST API v2 <br /><br /> Please visit [API v2 Changelog page](/api/docs/v2migration.html) for information about migrating from API v1. 

API version: 2.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CloudProvider struct for CloudProvider
type CloudProvider struct {
	CloudProviderId string `json:"cloudProviderId"`
	CloudProviderName string `json:"cloudProviderName"`
	Connected *bool `json:"connected,omitempty"`
}

// NewCloudProvider instantiates a new CloudProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProvider(cloudProviderId string, cloudProviderName string) *CloudProvider {
	this := CloudProvider{}
	this.CloudProviderId = cloudProviderId
	this.CloudProviderName = cloudProviderName
	return &this
}

// NewCloudProviderWithDefaults instantiates a new CloudProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderWithDefaults() *CloudProvider {
	this := CloudProvider{}
	return &this
}

// GetCloudProviderId returns the CloudProviderId field value
func (o *CloudProvider) GetCloudProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderId
}

// GetCloudProviderIdOk returns a tuple with the CloudProviderId field value
// and a boolean to check if the value has been set.
func (o *CloudProvider) GetCloudProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderId, true
}

// SetCloudProviderId sets field value
func (o *CloudProvider) SetCloudProviderId(v string) {
	o.CloudProviderId = v
}

// GetCloudProviderName returns the CloudProviderName field value
func (o *CloudProvider) GetCloudProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderName
}

// GetCloudProviderNameOk returns a tuple with the CloudProviderName field value
// and a boolean to check if the value has been set.
func (o *CloudProvider) GetCloudProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderName, true
}

// SetCloudProviderName sets field value
func (o *CloudProvider) SetCloudProviderName(v string) {
	o.CloudProviderName = v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *CloudProvider) GetConnected() bool {
	if o == nil || o.Connected == nil {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudProvider) GetConnectedOk() (*bool, bool) {
	if o == nil || o.Connected == nil {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *CloudProvider) HasConnected() bool {
	if o != nil && o.Connected != nil {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *CloudProvider) SetConnected(v bool) {
	o.Connected = &v
}

func (o CloudProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cloudProviderId"] = o.CloudProviderId
	}
	if true {
		toSerialize["cloudProviderName"] = o.CloudProviderName
	}
	if o.Connected != nil {
		toSerialize["connected"] = o.Connected
	}
	return json.Marshal(toSerialize)
}

type NullableCloudProvider struct {
	value *CloudProvider
	isSet bool
}

func (v NullableCloudProvider) Get() *CloudProvider {
	return v.value
}

func (v *NullableCloudProvider) Set(val *CloudProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProvider(val *CloudProvider) *NullableCloudProvider {
	return &NullableCloudProvider{value: val, isSet: true}
}

func (v NullableCloudProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


